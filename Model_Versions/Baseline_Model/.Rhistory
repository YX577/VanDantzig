costs=array(NA,dim=c(length(X)))
NPV_expected_losses=array(NA,dim=c(length(X)))
EV_p_exceed_transient=array(NA,dim=c(length(X)))
Total_flood_frequency=array(NA,dim=c(length(X)))
total_costs=array(NA,dim=c(length(X)))
discount_factor=array(NA, dim=c(length(time)))
effective_height=array(NA, dim=c(length(X),length(time)))
p_exceed_transient=array(NA, dim=c(length(X),length(time)))
NPV_costs_flooding=array(NA, dim=c(length(X),length(time)))
subsidence=subs_rate*time
sea_level_rise=sea_level_rate*time
?subset
library(scatterplot3d)
set.seed(1234)
x <- rnorm(30, 10, 3)
y <- rnorm(30, 20, 3)
z <- rnorm(30, 50, 5)
scatterplot3d(x, y, z)
scatterplot3d(x, y, z, pch=15, color="blue", main="This is a title",
xlab="X-label", ylab="Y-label", zlab="Z-label")
scatterplot3d(x, y, z, pch=21, color="blue", bg="red", main="This is a title",
xlab="X-label", ylab="Y-label", zlab="Z-label",
type="h", angle=58)
my.2dpoints <- my.scatterplot$xyz.convert(10, 20, 50)
text(my.2dpoints$x, my.2dpoints$y, "Mean x-y-z (10,20,50)", pos=4, font=2)
my.scatterplot <- scatterplot3d(x, y, z,
pch=21, color="blue", bg="red", main="This is a title",
xlab="X-label", ylab="Y-label", zlab="Z-label",
type="h", angle=58)
my.scatterplot$points3d(10, 20, 50, col="green", pch=17, cex=2.2)
my.2dpoints <- my.scatterplot$xyz.convert(10, 20, 50)
text(my.2dpoints$x, my.2dpoints$y, "Mean x-y-z (10,20,50)", pos=4, font=2)
rm(list = ls())
graphics.off()
T = 298.15 #K       # Variables can be assigned values using "=" or "<-" (arrow sign)
S = 35 #psu
K_B = exp((-8966.9 - 2890.51 * S^0.5 - 77.942 * S
+ 1.726 * S^1.5 - 0.0993 * S^2)/T + (148.0248
+ 137.194 * S^0.5 + 1.62247 * S)
+ (-24.4344 - 25.085 * S^0.5 - 0.2474 * S) * log(T)  # 'log' is fuction for natural log in R
+ (0.053105 * S^0.5 * T))                            # log10 is function for base 10 log
rm(list = ls())
graphics.off()
T = 298.15 #K       # Variables can be assigned values using "=" or "<-" (arrow sign)
S <- 35 #psu
K_B = exp((-8966.9 - 2890.51 * S^0.5 - 77.942 * S
+ 1.726 * S^1.5 - 0.0993 * S^2)/T + (148.0248
+ 137.194 * S^0.5 + 1.62247 * S)
+ (-24.4344 - 25.085 * S^0.5 - 0.2474 * S) * log(T)  # 'log' is fuction for natural log in R
+ (0.053105 * S^0.5 * T))                            # log10 is function for base 10 log
pK_B = -log10(K_B)                        # (pH at which both species is at 50% equilibrium)
pH = seq(4, 12, by = 0.5)                 # Set vector (sequence) of pH values from 4 - 12 in increments of 0.5
pH_K = 10^-pH                             # set vector of Hydrogen activity, aH+, to achieve pH
ratio = K_B / pH_K                        # Ratio of Borate to Boric Acid (products to reactants)
Borate = (ratio / (ratio + 1)) * 100      # Percent of total solution of Borate ion
Boric_Acid =  100 - Borate                # Percent of total solution of Boric Acid (subtract from 100 to get inverse)
Proportion <- array(NA, dim = c(17,3))    # This creates a blank table with 3 columns and 17 rows, and initializes with
View(Proportion)
View(Proportion)
colnames(Proportion) <- c("pH", "% Boric Acid", "% Borate Ion")   # Sets the names of the columns in the table
View(Proportion)
Proportion[,1] <- pH              # You can isolate individual rows/columns of a matrix/table using the following notation:
Proportion[,2] <- Boric_Acid
Proportion[,3] <- Borate
View(Proportion)                  # Lets you view a variable in a new window
?lty
?col
plot(pH, Boric_Acid,                                # "plot" function begins the plot, with the x and y variable in that order
type = 'l',                                    # "type = 'l'" signifies a line plot
ylim = c(0,100),                               # "ylim" manually sets the min and max y-axis dimensions
lwd = 2,                                       # "lwd" = linewidth. Default is 1, increasing numbers get thicker
pch = 19,                                      # "pch" = point character? Google it (or type '?pch'), there are multiple different point styles to choose
cex = 0.5,                                     # "cex" = character expansion (increases/decreases point size). Default = 1
ylab = "% of total DIC",                       # "ylab" = y-axis label
xlab = "pH")                                   # "xlab" = x-axis label
abline(v = pK_B, col = "gray")                      # "abline" sets straight lines. v=vertical, h=horizontal. You set the value of the y/x intercept
abline(h = 50, col = "gray")
points(pH, Borate, type = 'o',                      # "points" tells the plot to create scatterplot with x=pH, y=Borate. Type "o" is connected points
lty = 2,                                     # "lty" = linetype. Default is 1 (regular line), 2 is dashed
col = "blue",                                # "col" = color. R has multiple colors built in that can be called by name
pch = 19,
cex = 0.5,
lwd = 2)
legend(x="topleft",                                 # "legend" creates a legend. "Topleft" indicates location on plot
inset=c(0.05,0.1),                           # inset the legend into graph
legend=c("Boric Acid", "Borate Ion"),        # sets the name for the elements in the legend
col=c("black","blue"),
lty=c("solid","dashed"),                     # sets linetypes for legend. "solid" corresponds with "Boric Acid"
lwd=c(2,2,2)
)
box(lwd = 2)                                        # "box" just puts a box outline around the plot. Here I wanted to make the outline thicker
test <- seq(1,10, 1)
plot(rnorm(100))
plot(rnorm(100), col = "red")
plot(hist(rnorm(100)))
plot(hist(rnorm(100)))
plot(rnorm(100))
point(rnorm(1000), col = "green")
points(rnorm(1000), col = "green")
?rm.NA
a <- seq(1,20, 1)
b = function(x){
a^2 + 2*a + 2
}
b = function(a){
a^2 + 2*a + 2
}
b
b(a)
plot(a, b(a))
plot(b(a), b(a)/2*b(a))
test <- rnorm(100)
test[100:120] = NA
View(test)
test2 <- sample(test, 1000)
test2 <- sample(test, 1000, replace = T)
View(test2)
?sample
?if
?if
else
help(if)
test2 <- if test =/ NA, sample(test, 1000, replace = T)
?na.omit
test2 <- na.omit(test)
View(test2)
test <- rnorm(100)
test[101:120] = NA
test2 <- na.omit(test)
"test"
print(test)
students <- data.frame(people=c("Lily", "Bo", "Jen", "Omar", "Sara", "Jack", "Ting"), team=c("Red", "Blue", "Green", "Red", "Blue", "Green", "Red"), number=c(1,2,3,5,2,7,1))
View(students)
scores <- data.frame(team=c("Black", "Blue", "Green", "Indigo", "Orange", "Red", "Violet", "White", "Yellow"), score1=c(90,96,93,88,82,84,95,89,79), score2=c(5,5,4,4,5,3,5,5,3))
View(scores)
score1 <- rep(NA, 7)
score2 <- rep(NA, 7)
students <- data.frame(students, score1, score2)
students <- data.frame(people=c("Lily", "Bo", "Jen", "Omar", "Sara", "Jack", "Ting"), team=c("Red", "Blue", "Green", "Red", "Blue", "Green", "Red"), number=c(1,2,3,5,2,7,1))
students <- data.frame(students, score1, score2)
View(students)
students$score1 <- scores$score1[match(students$team, scores$team)]
View(students)
students$score2 <- scores$score2[match(students$team, scores$team)]
students$score2 <- scores$score2[match(students$team, scores$team)]
View(students)
library(ggmap)
library(ggplot2)
library(ggmap)
install.packages("ggplot2")
library(ggmap)
library(zoo)
library(extRemes)
library(fExtremes)
load("~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Uncertainty_SLR_GEV/SLR_GEV.RData")
matplot(gev, 1-q, log= 'y', type = 'l',lty = 1, col = "black")
matplot(gev[,1], 1-q, log= 'y', type = 'l',lty = 1, col = "black")
matplot(gev[,1], 1-q, log= 'y', type = 'l',lty = 1, col = "black")
matplot(gev, 1-q, log= 'y', type = 'l',lty = 1, col = "black")
matplot(gev, 1-q, log= 'y', type = 'l',lty = 1, col = rgb(0,0,0,0.05))
dim(EV_p_exceed_transient)
hist(EV_p_exceed_transient[1,])
setwd("~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Baseline_Model")
###################################################
# file: vanDantzig_baseline.R
#
# - van Dantzig (1956) flood risk model
# - Includes analytical solution and numerical analysis with uncertainty
###################################################
# Author and copyright: Perry Oddo
# Pennsylvania State University
# poddo@psu.edu
#
# Adapted from cost-benefit-slr.R
# Authored by: Ryan Sriver and Klaus Keller
# rsriver@illinois.edu, klaus@psu.edu
# Pennsylvania State University
#
# Distributed under the GNU general public license
# No warranty
#
# Based on: van Dantzig D (1956) Economic Decision Problems for flood prevention.
# Econometrica 24:276-287
###################################################
# Last changes: October 4, 2015 (PCO)
###################################################
# Set working directory
setwd("~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Baseline_Model")
# Clear environment and figures
rm(list = ls())
graphics.off()
# Load prior parameter values:
# Conservative estimates found in Section 6 - "The Doubtful Constants," van Dantzig (1956)
source("Scripts/priors.R")
# p_zero_p        = 0.0038      # Initial flood frequency (1/yr) with zero height increase
# alpha_p         = 2.6         # Exponential flood frequency constant
# V_p             = 1e+10 * 2   # Value of goods protected by dike (includes "factor of 2" for cost of human life)
# delta_prime_p   = 0.02        # Discount rate (percent/year)
# k_p             = 4.2e7       # Cost of heightening dikes by 1 meter
# subs_rate       = 0.002       # Rate of land subsidence (meter/year)
# sea_level_rate  = 0.008       # Rate of sea level rise (meter/year)
# Time horizon until next evaluation of dikes (years)
T = 75
# Time scale
beta_p = alpha_p * 1
# Initial dike height
H_0 = 4.25
###################################################
###          van Dantzig problem setup          ###
###################################################
### Case 1: Perform economic analysis without uncertainty
# Optimal dike heightening, X (equation 6 in paper), analytical solution:
C = (100 * p_zero_p * V_p * alpha_p) / ((delta_prime_p * 100-beta_p) * k_p) *
(1 - exp(-(delta_prime_p * 100-beta_p) * T/100)) /
(1 - exp(-delta_prime_p * 100 * T / 100));
X_analytical = 1/alpha_p * log(C)
# New dike height without uncertainty:
print(X_analytical + H_0)
### Case 2: Numerical Analysis with uncertainty
# Range of considered dike height increases (meters)
X = seq(0, 10, by=0.05)
# Time horizon in annual increments
time = seq(0, T, by=1)
# Define variables and intialize with NA values
p_exceed                   = array(NA, dim=c(length(X)))
costs                      = array(NA, dim=c(length(X)))
NPV_expected_losses        = array(NA, dim=c(length(X)))
EV_p_exceed_transient      = array(NA, dim=c(length(X)))
Total_flood_frequency      = array(NA, dim=c(length(X)))
total_costs                = array(NA, dim=c(length(X)))
discount_factor            = array(NA, dim=c(length(time)))
effective_height           = array(NA, dim=c(length(X), length(time)))
p_exceed_transient         = array(NA, dim=c(length(X), length(time)))
NPV_costs_flooding         = array(NA, dim=c(length(X), length(time)))
subsidence                 = subs_rate * time
sea_level_rise             = sea_level_rate * time
# Analyze for each considered Deike heightening
# Loop over each dike height (X), and for each year in time horizon
for(i in 1:length(X)) {
# Exceedance probability of current dike height (equation 1)
p_exceed[i] = p_zero_p*exp(-alpha_p*X[i])
for (j in 1:length(time)) {
# Analze for each year of the initial time period
year = j-1
# Annual discounting factor as a function of time
discount_factor[j] = 1/(1+delta_prime_p)^year
# The effective dike height is the current height minus the
# combined effects of land subsidence and sea-level rise
effective_height[i,j] = X[i]-subsidence[j]-sea_level_rise[j]
# Annual flood frequency using old observations and new effective height
# (assumes stationary flooding frequency)
p_exceed_transient[i,j] = p_zero_p*exp(-alpha_p*effective_height[i,j])
#The net present value of the losses per year are the product of the
#frequency of flooding per year, the damages per flood, and the discount factor.
NPV_costs_flooding[i,j] = p_exceed_transient[i,j]*V_p*discount_factor[j]
}
# The costs of flood protection (dike building) - increase linearly with respect to height
costs[i] = k_p*X[i]
# The total discounted expected losses are the sum of the discounted expected annual losses
NPV_expected_losses[i] = sum(NPV_costs_flooding[i,])
# Expected value of average annual flood frequency (mean of annual flood frequencies)
EV_p_exceed_transient[i] = mean(p_exceed_transient[i,])
# The total flood frequency over the life-time of the project is the sum of the flood frequencies,
# assuming independence, as in the original paper
Total_flood_frequency[i] = sum(p_exceed_transient[i,])
# The total costs that depend on the dike height. This analysis neglects initial mobilization
# costs (I_0) in paper, as well as any costs extending beyond considered time horizon
total_costs[i] = costs[i]+NPV_expected_losses[i]
}
# Find the minimum cost along the Total Cost curve
min_ind = seq(along=total_costs)[total_costs == min(total_costs)]
min_cost_X = X[min_ind]
print(min_cost_X)
# Find optimal dike height under uncertainty
X_optimal = min_cost_X + H_0
print(X_optimal)
# Find de-minimis risk defense (minimum flood frequency threshold)
de_minimis_risk = 1e-06      # Corresponds to 1 flood in 1,000,000 years
# Find dike height increase corresponding to de-mininis risk defense
# This is the minimum height at which total flood frequency is below a threshold
de_minimis_risk_ind = min(which(Total_flood_frequency <= de_minimis_risk))
min_cost_de_minimis_X = X[de_minimis_risk_ind]
print(min_cost_de_minimis_X)
plot(X, NPV_expected_losses, type = 'l',
col = myred,
lwd = 3,
ylim = c(0,7e+08),
xlab = expression(bold("Dike height increase [m]")),
ylab = expression(bold('Expected cost [Guilders]'))
)
source("Scripts/mycolors.R")
plot(X, NPV_expected_losses, type = 'l',
col = myred,
lwd = 3,
ylim = c(0,7e+08),
xlab = expression(bold("Dike height increase [m]")),
ylab = expression(bold('Expected cost [Guilders]'))
)
abline(v = 2.48, col = "gray", lwd = 3)
lines(X, costs, col = myblue, lwd = 3)
lines(X, total_costs, col = 'black', lwd = 4, lty = 2)
points(min_cost_X, total_costs[min_ind], pch = 20, cex = 2)
points(min_cost_de_minimis_X, total_costs[de_minimis_risk_ind], pch = 18, cex = 2, col = "orange")
text(min_cost_X,
total_costs[min_ind]*1.25,
labels = min_cost_X)
text(min_cost_de_minimis_X,
total_costs[de_minimis_risk_ind]*1.15,
labels = min_cost_de_minimis_X)
legend("topright",
c("Expected Losses",
"Investment Costs",
"Total Costs",
"Minimum Cost",
"Minimum Risk",
"van Dantzig [1956] optimal"),
lty = c(1, 1, 2, NA, NA, 1),
lwd = c(3, 3, 3, NA, NA, 3),
pch = c(NA, NA, NA, 20, 18, NA),
col = c(myred, myblue, "black", "black", "orange", "gray"),
pt.cex = 1.25,
bty = 'n',
inset = c(0.01, 0.01)
)
x <- 1:10
y <- rnorm(10)
par(mfrow = c(2,1))
plot(x, y, main = "approx(.) and approxfun(.)")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
points(approx(x, y, method = "constant"), col = "green", pch = "*")
points(approx(x, y), col = "orange", pch = "*")
graphics.off()
x
y
y <- c(1, 4, 7, 2, 10, 9, 6, 1, 11)
length(y)
y <- c(1, 4, 7, 2, 10, 9, 6, 1, 11, 3)
plot(x, y)
y <- rnorm(10)
plot(x, y, main = "approx(.) and approxfun(.)")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
approx(x,y)
points(approx(x, y), col = 2, pch = "*")
y <- c(1, 4, 7, 2, 10, 9, 6, 1, 11)
plot(x, y, main = "approx(.) and approxfun(.)")
y <- c(1, 4, 7, 2, 10, 9, 6, 1, 11, 3)
plot(x, y, main = "approx(.) and approxfun(.)")
points(approx(x, y), col = 2, pch = "*")
approx(x,y)
p_zero_p        = 0.0038      # Initial flood frequency (1/yr) with zero height increase
alpha_p         = 2.6         # Exponential flood frequency constant
V_p             = 80278000000   # Value of goods protected by dike (includes "factor of 2" for cost of human life)
delta_prime_p   = 0.02        # Discount rate (percent/year)
k_p             = 4.2e7       # Cost of heightening dikes by 1 meter
subs_rate       = 0.002       # Rate of land subsidence (meter/year)
sea_level_rate  = 0.008       # Rate of sea level rise (meter/year)
# Time horizon until next evaluation of dikes (years)
T = 75
# Time scale
beta_p = alpha_p * 1
# Initial dike height
H_0 = 4.25
###################################################
###          van Dantzig problem setup          ###
###################################################
### Case 1: Perform economic analysis without uncertainty
# Optimal dike heightening, X (equation 6 in paper), analytical solution:
C = (100 * p_zero_p * V_p * alpha_p) / ((delta_prime_p * 100-beta_p) * k_p) *
(1 - exp(-(delta_prime_p * 100-beta_p) * T/100)) /
(1 - exp(-delta_prime_p * 100 * T / 100));
X_analytical = 1/alpha_p * log(C)
# New dike height without uncertainty:
print(X_analytical + H_0)
### Case 2: Numerical Analysis with uncertainty
# Range of considered dike height increases (meters)
X = seq(0, 10, by=0.05)
# Time horizon in annual increments
time = seq(0, T, by=1)
# Define variables and intialize with NA values
p_exceed                   = array(NA, dim=c(length(X)))
costs                      = array(NA, dim=c(length(X)))
NPV_expected_losses        = array(NA, dim=c(length(X)))
EV_p_exceed_transient      = array(NA, dim=c(length(X)))
Total_flood_frequency      = array(NA, dim=c(length(X)))
total_costs                = array(NA, dim=c(length(X)))
discount_factor            = array(NA, dim=c(length(time)))
effective_height           = array(NA, dim=c(length(X), length(time)))
p_exceed_transient         = array(NA, dim=c(length(X), length(time)))
NPV_costs_flooding         = array(NA, dim=c(length(X), length(time)))
subsidence                 = subs_rate * time
sea_level_rise             = sea_level_rate * time
# Analyze for each considered Deike heightening
# Loop over each dike height (X), and for each year in time horizon
for(i in 1:length(X)) {
# Exceedance probability of current dike height (equation 1)
p_exceed[i] = p_zero_p*exp(-alpha_p*X[i])
for (j in 1:length(time)) {
# Analze for each year of the initial time period
year = j-1
# Annual discounting factor as a function of time
discount_factor[j] = 1/(1+delta_prime_p)^year
# The effective dike height is the current height minus the
# combined effects of land subsidence and sea-level rise
effective_height[i,j] = X[i]-subsidence[j]-sea_level_rise[j]
# Annual flood frequency using old observations and new effective height
# (assumes stationary flooding frequency)
p_exceed_transient[i,j] = p_zero_p*exp(-alpha_p*effective_height[i,j])
#The net present value of the losses per year are the product of the
#frequency of flooding per year, the damages per flood, and the discount factor.
NPV_costs_flooding[i,j] = p_exceed_transient[i,j]*V_p*discount_factor[j]
}
# The costs of flood protection (dike building) - increase linearly with respect to height
costs[i] = k_p*X[i]
# The total discounted expected losses are the sum of the discounted expected annual losses
NPV_expected_losses[i] = sum(NPV_costs_flooding[i,])
# Expected value of average annual flood frequency (mean of annual flood frequencies)
EV_p_exceed_transient[i] = mean(p_exceed_transient[i,])
# The total flood frequency over the life-time of the project is the sum of the flood frequencies,
# assuming independence, as in the original paper
Total_flood_frequency[i] = sum(p_exceed_transient[i,])
# The total costs that depend on the dike height. This analysis neglects initial mobilization
# costs (I_0) in paper, as well as any costs extending beyond considered time horizon
total_costs[i] = costs[i]+NPV_expected_losses[i]
}
# Find the minimum cost along the Total Cost curve
min_ind = seq(along=total_costs)[total_costs == min(total_costs)]
min_cost_X = X[min_ind]
print(min_cost_X)
# Find optimal dike height under uncertainty
X_optimal = min_cost_X + H_0
print(X_optimal)
# Find de-minimis risk defense (minimum flood frequency threshold)
de_minimis_risk = 1e-06      # Corresponds to 1 flood in 1,000,000 years
# Find dike height increase corresponding to de-mininis risk defense
# This is the minimum height at which total flood frequency is below a threshold
de_minimis_risk_ind = min(which(Total_flood_frequency <= de_minimis_risk))
min_cost_de_minimis_X = X[de_minimis_risk_ind]
print(min_cost_de_minimis_X)
#####################################################
###                 Plot Results                  ###
#####################################################
# Van Dantzig cost-benefit analysis - optimal dike height vs. minimum risk height
# Co
plot(X, NPV_expected_losses, type = 'l',
col = myred,
lwd = 3,
ylim = c(0,7e+08),
xlab = expression(bold("Dike height increase [m]")),
ylab = expression(bold('Expected cost [Guilders]'))
)
abline(v = 2.48, col = "gray", lwd = 3)
lines(X, costs, col = myblue, lwd = 3)
lines(X, total_costs, col = 'black', lwd = 4, lty = 2)
points(min_cost_X, total_costs[min_ind], pch = 20, cex = 2)
points(min_cost_de_minimis_X, total_costs[de_minimis_risk_ind], pch = 18, cex = 2, col = "orange")
text(min_cost_X,
total_costs[min_ind]*1.25,
labels = min_cost_X)
text(min_cost_de_minimis_X,
total_costs[de_minimis_risk_ind]*1.15,
labels = min_cost_de_minimis_X)
length(X)
x <- c(0       ,10       ,20       ,30       ,40       ,50       ,60       ,70       ,80       ,90       ,100       ,200       300)
x <- c(0       ,10       ,20       ,30       ,40       ,50       ,60       ,70       ,80       ,90       ,100       ,200       ,300)
x <- c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200, 300)
y <- c(79672014779,81157043481, 82582482569,83915309959,85207457392,86406785535,87561030932,88685952810,89760324233,90804673491,91826522152,98730615647,1.00542E+11)
y
plot(x,y)
approx   (x, y = NULL, xout, method="linear", n=50,
yleft, yright, rule = 1, f = 0, ties = mean)
approx(x, y, xout = 201)
plot(x,y)
points(approx(x, y), col = 2, pch = "*")
approx(x,y)
?approx
approx(x,y, n= 201)
plot(X, approx(x,y, n= 201))
length(X)
test <- approx(x,y, n= 201)
length(test)
length(test)$y
plot(X, test$y)
effective_height
View(effective_height)
View(p_exceed_transient)
plot(X, NPV_expected_losses, type = 'l',
col = myred,
lwd = 3,
ylim = c(0,7e+08),
xlab = expression(bold("Dike height increase [m]")),
ylab = expression(bold('Expected cost [Guilders]'))
)
abline(v = 2.48, col = "gray", lwd = 3)
lines(X, costs, col = myblue, lwd = 3)
lines(X, total_costs, col = 'black', lwd = 4, lty = 2)
points(min_cost_X, total_costs[min_ind], pch = 20, cex = 2)
points(min_cost_de_minimis_X, total_costs[de_minimis_risk_ind], pch = 18, cex = 2, col = "orange")
text(min_cost_X,
total_costs[min_ind]*1.25,
labels = min_cost_X)
text(min_cost_de_minimis_X,
total_costs[de_minimis_risk_ind]*1.15,
labels = min_cost_de_minimis_X)
flood = c(seq(0,3, 0.1))
flood
length(flood)
getwd()
source('~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Baseline_Model/vanDantzig_baseline_NOLA.R', echo=TRUE)
source('~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Baseline_Model/vanDantzig_baseline_NOLA.R', echo=TRUE)
length(X)
