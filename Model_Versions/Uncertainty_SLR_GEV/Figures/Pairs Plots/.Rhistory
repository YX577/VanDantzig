N_SOW=length(SL_rate_samples)
# probabilty of each SOW, assumed so far equally likely
p_SOW=rep(1/N_SOW, N_SOW)
# perform simple risk and economic analysis
# case 1: without uncertainty
# determine optimal X: (eqs. 12 and 14 in paper)
C=(100*p_zero_p*V_p*alpha_p)/((delta_prime_p*100-beta_p)*k_p) *
(1-exp(-(delta_prime_p*100-beta_p)*T/100)) /
(1-exp(-delta_prime_p*100*T/100));
X_analytical=1/alpha_p*log(C)
print(X_analytical)
# costs of heightening per m in gulders.
k_p=4.2e7
# ime horizon to the next revision of the dike (in years), from paper
T=75
# subsidence rate in m/a, from the paper. Equivalent to 0.7 m per century.
subs_rate=0.007
# Example sea_level rise rate in m/a. Equivalent to 0.9 m per century
sea_level_rate=0.009
# time scale
beta_p=alpha_p*1
# parameters for the probabilistic analysis of SLR
# SL_rates in m/a
SL_rate_samples=c(0.003, 0.009, 0.015)
# number of samples
N_SOW=length(SL_rate_samples)
# probabilty of each SOW, assumed so far equally likely
p_SOW=rep(1/N_SOW, N_SOW)
# perform simple risk and economic analysis
# case 1: without uncertainty
# determine optimal X: (eqs. 12 and 14 in paper)
C=(100*p_zero_p*V_p*alpha_p)/((delta_prime_p*100-beta_p)*k_p) *
(1-exp(-(delta_prime_p*100-beta_p)*T/100)) /
(1-exp(-delta_prime_p*100*T/100));
X_analytical=1/alpha_p*log(C)
print(X_analytical)
# case 2:  with uncertainty
# considerd range of Deike heigtening in meters
X=seq(0,10,by=0.05)
# considered time horison, in annual increments
time=seq(0,T,by=1)
# Define variables
p_exceed=array(NA,dim=c(length(X)))
costs=array(NA,dim=c(length(X)))
NPV_expected_losses=array(NA,dim=c(length(X)))
EV_p_exceed_transient=array(NA,dim=c(length(X)))
Total_flood_frequency=array(NA,dim=c(length(X)))
total_costs=array(NA,dim=c(length(X)))
discount_factor=array(NA, dim=c(length(time)))
effective_height=array(NA, dim=c(length(X),length(time)))
p_exceed_transient=array(NA, dim=c(length(X),length(time)))
NPV_costs_flooding=array(NA, dim=c(length(X),length(time)))
subsidence=subs_rate*time
sea_level_rise=sea_level_rate*time
?subset
library(scatterplot3d)
set.seed(1234)
x <- rnorm(30, 10, 3)
y <- rnorm(30, 20, 3)
z <- rnorm(30, 50, 5)
scatterplot3d(x, y, z)
scatterplot3d(x, y, z, pch=15, color="blue", main="This is a title",
xlab="X-label", ylab="Y-label", zlab="Z-label")
scatterplot3d(x, y, z, pch=21, color="blue", bg="red", main="This is a title",
xlab="X-label", ylab="Y-label", zlab="Z-label",
type="h", angle=58)
my.2dpoints <- my.scatterplot$xyz.convert(10, 20, 50)
text(my.2dpoints$x, my.2dpoints$y, "Mean x-y-z (10,20,50)", pos=4, font=2)
my.scatterplot <- scatterplot3d(x, y, z,
pch=21, color="blue", bg="red", main="This is a title",
xlab="X-label", ylab="Y-label", zlab="Z-label",
type="h", angle=58)
my.scatterplot$points3d(10, 20, 50, col="green", pch=17, cex=2.2)
my.2dpoints <- my.scatterplot$xyz.convert(10, 20, 50)
text(my.2dpoints$x, my.2dpoints$y, "Mean x-y-z (10,20,50)", pos=4, font=2)
rm(list = ls())
graphics.off()
T = 298.15 #K       # Variables can be assigned values using "=" or "<-" (arrow sign)
S = 35 #psu
K_B = exp((-8966.9 - 2890.51 * S^0.5 - 77.942 * S
+ 1.726 * S^1.5 - 0.0993 * S^2)/T + (148.0248
+ 137.194 * S^0.5 + 1.62247 * S)
+ (-24.4344 - 25.085 * S^0.5 - 0.2474 * S) * log(T)  # 'log' is fuction for natural log in R
+ (0.053105 * S^0.5 * T))                            # log10 is function for base 10 log
rm(list = ls())
graphics.off()
T = 298.15 #K       # Variables can be assigned values using "=" or "<-" (arrow sign)
S <- 35 #psu
K_B = exp((-8966.9 - 2890.51 * S^0.5 - 77.942 * S
+ 1.726 * S^1.5 - 0.0993 * S^2)/T + (148.0248
+ 137.194 * S^0.5 + 1.62247 * S)
+ (-24.4344 - 25.085 * S^0.5 - 0.2474 * S) * log(T)  # 'log' is fuction for natural log in R
+ (0.053105 * S^0.5 * T))                            # log10 is function for base 10 log
pK_B = -log10(K_B)                        # (pH at which both species is at 50% equilibrium)
pH = seq(4, 12, by = 0.5)                 # Set vector (sequence) of pH values from 4 - 12 in increments of 0.5
pH_K = 10^-pH                             # set vector of Hydrogen activity, aH+, to achieve pH
ratio = K_B / pH_K                        # Ratio of Borate to Boric Acid (products to reactants)
Borate = (ratio / (ratio + 1)) * 100      # Percent of total solution of Borate ion
Boric_Acid =  100 - Borate                # Percent of total solution of Boric Acid (subtract from 100 to get inverse)
Proportion <- array(NA, dim = c(17,3))    # This creates a blank table with 3 columns and 17 rows, and initializes with
View(Proportion)
View(Proportion)
colnames(Proportion) <- c("pH", "% Boric Acid", "% Borate Ion")   # Sets the names of the columns in the table
View(Proportion)
Proportion[,1] <- pH              # You can isolate individual rows/columns of a matrix/table using the following notation:
Proportion[,2] <- Boric_Acid
Proportion[,3] <- Borate
View(Proportion)                  # Lets you view a variable in a new window
?lty
?col
plot(pH, Boric_Acid,                                # "plot" function begins the plot, with the x and y variable in that order
type = 'l',                                    # "type = 'l'" signifies a line plot
ylim = c(0,100),                               # "ylim" manually sets the min and max y-axis dimensions
lwd = 2,                                       # "lwd" = linewidth. Default is 1, increasing numbers get thicker
pch = 19,                                      # "pch" = point character? Google it (or type '?pch'), there are multiple different point styles to choose
cex = 0.5,                                     # "cex" = character expansion (increases/decreases point size). Default = 1
ylab = "% of total DIC",                       # "ylab" = y-axis label
xlab = "pH")                                   # "xlab" = x-axis label
abline(v = pK_B, col = "gray")                      # "abline" sets straight lines. v=vertical, h=horizontal. You set the value of the y/x intercept
abline(h = 50, col = "gray")
points(pH, Borate, type = 'o',                      # "points" tells the plot to create scatterplot with x=pH, y=Borate. Type "o" is connected points
lty = 2,                                     # "lty" = linetype. Default is 1 (regular line), 2 is dashed
col = "blue",                                # "col" = color. R has multiple colors built in that can be called by name
pch = 19,
cex = 0.5,
lwd = 2)
legend(x="topleft",                                 # "legend" creates a legend. "Topleft" indicates location on plot
inset=c(0.05,0.1),                           # inset the legend into graph
legend=c("Boric Acid", "Borate Ion"),        # sets the name for the elements in the legend
col=c("black","blue"),
lty=c("solid","dashed"),                     # sets linetypes for legend. "solid" corresponds with "Boric Acid"
lwd=c(2,2,2)
)
box(lwd = 2)                                        # "box" just puts a box outline around the plot. Here I wanted to make the outline thicker
test <- seq(1,10, 1)
plot(rnorm(100))
plot(rnorm(100), col = "red")
plot(hist(rnorm(100)))
plot(hist(rnorm(100)))
plot(rnorm(100))
point(rnorm(1000), col = "green")
points(rnorm(1000), col = "green")
?rm.NA
a <- seq(1,20, 1)
b = function(x){
a^2 + 2*a + 2
}
b = function(a){
a^2 + 2*a + 2
}
b
b(a)
plot(a, b(a))
plot(b(a), b(a)/2*b(a))
test <- rnorm(100)
test[100:120] = NA
View(test)
test2 <- sample(test, 1000)
test2 <- sample(test, 1000, replace = T)
View(test2)
?sample
?if
?if
else
help(if)
test2 <- if test =/ NA, sample(test, 1000, replace = T)
?na.omit
test2 <- na.omit(test)
View(test2)
test <- rnorm(100)
test[101:120] = NA
test2 <- na.omit(test)
"test"
print(test)
students <- data.frame(people=c("Lily", "Bo", "Jen", "Omar", "Sara", "Jack", "Ting"), team=c("Red", "Blue", "Green", "Red", "Blue", "Green", "Red"), number=c(1,2,3,5,2,7,1))
View(students)
scores <- data.frame(team=c("Black", "Blue", "Green", "Indigo", "Orange", "Red", "Violet", "White", "Yellow"), score1=c(90,96,93,88,82,84,95,89,79), score2=c(5,5,4,4,5,3,5,5,3))
View(scores)
score1 <- rep(NA, 7)
score2 <- rep(NA, 7)
students <- data.frame(students, score1, score2)
students <- data.frame(people=c("Lily", "Bo", "Jen", "Omar", "Sara", "Jack", "Ting"), team=c("Red", "Blue", "Green", "Red", "Blue", "Green", "Red"), number=c(1,2,3,5,2,7,1))
students <- data.frame(students, score1, score2)
View(students)
students$score1 <- scores$score1[match(students$team, scores$team)]
View(students)
students$score2 <- scores$score2[match(students$team, scores$team)]
students$score2 <- scores$score2[match(students$team, scores$team)]
View(students)
library(ggmap)
library(ggplot2)
library(ggmap)
install.packages("ggplot2")
library(ggmap)
library(zoo)
library(extRemes)
library(fExtremes)
setwd("~/Documents/Grad/SCRiM/vanDantzig/Model Versions/Parametric Uncertainty/Sensitivity Analysis/OAT")
# Compile
setwd("~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Parametric_Uncertainty/Sensitivity_Analysis/OAT")
rm(list = ls())
graphics.off()
library(compiler)
enableJIT(3)
# Number of observations
n_obs = 10^4
# Set prior parameter values - Section 6 "The Doubtful Constants," van Dantzig (1956)
source("../../Scripts/priors.R")
# Sample parameters with LHS function
# Creates data.frame with parameter PDFs
source("../../Scripts/LHS.R")
Parameter_PDF <- Parameters
# Create vector to change parameters from 1% to 99% quantile of PDF
quantile_prior <- seq(0.01, 0.99, by = 0.01)
# van Dantzig problem setup:
# Time horizon until next evaluation of dikes (years)
T = 75
# Time scale
beta_p = alpha_p * (subs_rate + sea_level_rate)
# Fix dike height at "optimal" level from baseline model
X = 2.6
# considered time horizon, in annual increments
time = seq(0,T,by=1)
getwd()
source('~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Parametric_Uncertainty/Sensitivity_Analysis/OAT/OAT_sensitivity.R', echo=TRUE)
EV_p_exceed_transient_OAT
EV_p_exceed_transient_range
EV_p_exceed_transient_range_minus
EV_p_exceed_transient_range_plus
NPV_expected_losses_range
NPV_expected_losses_range_minus
NPV_expected_losses_range_plus
total_costs_range
total_costs_range_minus
total_costs_range_plus
source('~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Parametric_Uncertainty/Sensitivity_Analysis/OAT/OAT_sensitivity.R', echo=TRUE)
dim(effective_height)
View(effective_height[,,1])
###################################
# file: OAT_sensitivity.R
###################################
# Author and copyright: Perry Oddo
# Pennsylvania State University
# poddo@psu.edu
###################################
# One-at-a-time sensitivity analysis
# for van Dantzig (1956) model
####################################
# Set working directory
# setwd("~/Documents/Grad/SCRiM/vanDantzig/Model Versions/Parametric Uncertainty/Sensitivity Analysis/OAT")
# Compile
rm(list = ls())
graphics.off()
library(compiler)
enableJIT(3)
# Number of observations
n_obs = 10^4
# Set prior parameter values - Section 6 "The Doubtful Constants," van Dantzig (1956)
source("../../Scripts/priors.R")
# Sample parameters with LHS function
# Creates data.frame with parameter PDFs
source("../../Scripts/LHS.R")
Parameter_PDF <- Parameters
# Create vector to change parameters from 1% to 99% quantile of PDF
quantile_prior <- seq(0.01, 0.99, by = 0.01)
# van Dantzig problem setup:
# Time horizon until next evaluation of dikes (years)
T = 75
# Time scale
beta_p = alpha_p * (subs_rate + sea_level_rate)
# Fix dike height at "optimal" level from baseline model
X = 2.35
# considered time horizon, in annual increments
time = seq(0,T,by=1)
# Define variables
p_exceed                = array(NA, dim = c(length(X), length(quantile_prior)))
costs                   = array(NA, dim = c(length(X), length(quantile_prior)))
NPV_expected_losses     = array(NA, dim = c(length(X), length(quantile_prior)))
EV_p_exceed_transient   = array(NA, dim = c(length(X), length(quantile_prior)))
Total_flood_frequency   = array(NA, dim = c(length(X), length(quantile_prior)))
total_costs             = array(NA, dim = c(length(X), length(quantile_prior)))
discount_factor         = array(NA, dim = c(length(time), length(quantile_prior)))
effective_height        = array(NA, dim = c(length(X), length(time), length(quantile_prior)))
p_exceed_transient      = array(NA, dim = c(length(X),length(time), length(quantile_prior)))
NPV_costs_flooding      = array(NA, dim = c(length(X),length(time), length(quantile_prior)))
subsidence              = array(NA, dim = c(length(time), length(quantile_prior)))
sea_level_rise          = array(NA, dim = c(length(time), length(quantile_prior)))
# Create uniform arrays for all parameters
p_zero_p          = array(priors$p_zero_p, length(quantile_prior))
alpha_p           = array(priors$alpha_p, length(quantile_prior))
V_p               = array(priors$V_p, length(quantile_prior))
delta_prime_p     = array(priors$delta_prime_p, length(quantile_prior))
k_p               = array(priors$k_p, length(quantile_prior))
subs_rate         = array(priors$subs_rate, length(quantile_prior))
sea_level_rate    = array(priors$sea_level_rate, length(quantile_prior))
Parameters <- data.frame(p_zero_p, alpha_p, V_p, delta_prime_p, k_p, subs_rate, sea_level_rate)
# Vector for 4 objectives
total_costs_OAT             <- array(NA, dim = c(length(quantile_prior), length(Parameters)))
costs_OAT                   <- array(NA, dim = c(length(quantile_prior), length(Parameters)))
NPV_expected_losses_OAT     <- array(NA, dim = c(length(quantile_prior), length(Parameters)))
EV_p_exceed_transient_OAT   <- array(NA, dim = c(length(quantile_prior), length(Parameters)))
# Run model for by holding all parameters constant and changing one at a time
for(n in 1:length(Parameters)){
p_zero_p          = array(priors$p_zero_p, length(quantile_prior))
alpha_p           = array(priors$alpha_p, length(quantile_prior))
V_p               = array(priors$V_p, length(quantile_prior))
delta_prime_p     = array(priors$delta_prime_p, length(quantile_prior))
k_p               = array(priors$k_p, length(quantile_prior))
subs_rate         = array(priors$subs_rate, length(quantile_prior))
sea_level_rate    = array(priors$sea_level_rate, length(quantile_prior))
Parameters <- data.frame(p_zero_p, alpha_p, V_p, delta_prime_p, k_p, subs_rate, sea_level_rate)
# Create vector to change single parameter from 1% to 99% quantile
Parameters[n] <- sapply(1:length(quantile_prior), function(x)
{
quantile(Parameter_PDF[,n], probs = quantile_prior[x])
})
# Analyze for each considered Deike heightening (eq. 1 in paper)
for(i in 1:length(quantile_prior)) {
# Exceedance probability of current dike height
p_exceed[i]= Parameters$p_zero_p[i]*exp(-(Parameters$alpha_p[i])*X)
for (j in 1:length(time)) {
# Land subsidence over length of time horizon
subsidence[j,] = Parameters$subs_rate[i]*time[j]
# Sea level rise over length of time horizon
sea_level_rise[j,] = Parameters$sea_level_rate[i]*time[j]
# Analze for each year of the initial time period
year = j-1
# Annual discounting factor as a function of time
discount_factor[j,] = 1/(1+Parameters$delta_prime_p[i])^year
# The effective dike height is the current height minus the combined effects of subsidence and sea-level rise
effective_height[,j,] = X - subsidence[j,] - sea_level_rise[j,]
# Annual flood frequency using old observations and new effective height (assumes stationary flooding frequency)
p_exceed_transient[,j,] = Parameters$p_zero_p[i]*exp(-(Parameters$alpha_p[i])*effective_height[,j,])
# Net Present Value of the discounted expected annual losses (damages due to flooding in a given year)
NPV_costs_flooding[,j,] = p_exceed_transient[,j,]*Parameters$V_p[i]*discount_factor[j,]
}
# The costs of flood protection (dike building) - increase linearly with respect to height
costs[i] = Parameters$k_p[i]*X
# The total discounted expected losses are the sum of the discounted expected annual losses
NPV_expected_losses[i]=sum(NPV_costs_flooding[,j,])
# Expected value of average annual flood frequency (mean of annual flood frequencies)
EV_p_exceed_transient[i]=mean(p_exceed_transient[,j,])
# The total flood frequency over the life-time of the project is the sum of the flood frequencies,
# assuming independence, as in the original paper
Total_flood_frequency[i]=sum(p_exceed_transient[,j,])
# The total costs that depend on the dike height. This analysis neglects initial mobilization
# costs (I_0) in paper, as well as any costs extending beyond considered time horizon
total_costs[i] = costs[i] + NPV_expected_losses[i]
}
# Find the index of the EUM point (minimum along total costs)
total_costs_OAT[,n] <- total_costs
costs_OAT[,n] <- costs
NPV_expected_losses_OAT[,n] <- NPV_expected_losses
EV_p_exceed_transient_OAT[,n] <- EV_p_exceed_transient
}
colnames(total_costs_OAT) <- names(priors)
colnames(costs_OAT) <- names(priors)
colnames(NPV_expected_losses_OAT) <- names(priors)
colnames(EV_p_exceed_transient_OAT) <- names(priors)
View(effective_height[,,1])
effective_height        = array(NA, dim = c(length(X), length(time), length(quantile_prior)))
View(effective_height[,,1])
dim(effective_height)
rm(list = ls())
graphics.off()
library(compiler)
enableJIT(3)
# Number of observations
n_obs = 10^4
# Set prior parameter values - Section 6 "The Doubtful Constants," van Dantzig (1956)
source("../../Scripts/priors.R")
source("../../Scripts/LHS.R")
View(Parameters)
Parameter_PDF <- Parameters
rm(list = ls())
load("~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Uncertainty_SLR_GEV/vanDantzig_SLR_GEV.R")
load("~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Uncertainty_SLR_GEV/SLR_GEV.RData")
setwd("~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Uncertainty_SLR_GEV/Figures/Objective Tradeoffs")
source('~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Uncertainty_SLR_GEV/Figures/Objective Tradeoffs/Baseline_tradeoffs.R', echo=TRUE)
source('~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Uncertainty_SLR_GEV/Figures/Objective Tradeoffs/Uncertainty_tradeoffs.R', echo=TRUE)
load("~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Uncertainty_SLR_GEV/SLR_GEV.RData")
setwd("~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Uncertainty_SLR_GEV/Figures/Objective Tradeoffs")
source('~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Uncertainty_SLR_GEV/Figures/Objective Tradeoffs/Uncertainty_tradeoffs.R', echo=TRUE)
X
X[53]
which(X==2.35)
load("~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Parametric_Uncertainty/Parametric_Uncertainty.RData")
min_ind
min_ind_mean
X[min_ind_mean]
setwd("~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Parametric_Uncertainty/Figures/Objective Tradeoffs")
source('~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Parametric_Uncertainty/Figures/Objective Tradeoffs/Uncertainty_tradeoffs.R', echo=TRUE)
source('~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Parametric_Uncertainty/Figures/Objective Tradeoffs/Uncertainty_tradeoffs.R', echo=TRUE)
png("test.png")
plot(NPV_expected_losses.v, EV_p_exceed_transient.v)
dev.off()
png("test.png")
plot(NPV_expected_losses.v, EV_p_exceed_transient.v, log = 'x')
dev.off()
png("test.png")
plot(EV_p_exceed_transient.v, NPV_expected_losses.v, log = 'x')
dev.off()
source('~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Parametric_Uncertainty/Figures/Objective Tradeoffs/Uncertainty_tradeoffs.R', echo=TRUE)
min_ind
X[min_ind]
X[min_ind_mean]
min(EV_p_exceed_transient)
max(EV_p_exceed_transient)
View(df.max)
View(df.min)
library(geometry)
install.packages("geometry")
min_ind
X[min_ind]
setwd("~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Parametric_Uncertainty")
rm(list = ls())
graphics.off()
library(compiler)
enableJIT(3)
# Set seed for reproducibility
set.seed(1)
# Number of observations
n_obs = 10^4
# Prior parameter values - Section 6 "The Doubtful Constants," van Dantzig (1956)
source("Scripts/priors.R")
source("Scripts/LHS.R")
View(Parameters)
hist(Parameters[,1])
Parameters[1,1]
Parameters[100,1]
Parameters[10000,1]
Parameters[1000,1]
Parameters[1001,1]
ps <- matrix(rnorm(3000), ncol=3)  # generate points on a sphereps <- sqrt(3)*ps/drop(sqrt((ps^2) %*% rep(1, 3)))ts.surf <- t(convhulln(ps))  # see the qhull documentations for the options## Not run:rgl.triangles(ps[ts.surf,1],ps[ts.surf,2],ps[ts.surf,3],col="blue",alpha=.2)for(i in 1:(8*360)) rgl.viewpoint(i/8)
rgl.triangles(ps[ts.surf,1],ps[ts.surf,2],ps[ts.surf,3],col="blue",alpha=.2)
library(chull)
load("~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Parametric_Uncertainty/vanDantzig_Uncertainty.R")
load("~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Parametric_Uncertainty/Parametric_Uncertainty.RData")
Plot_ConvexHull<-function(xcoord, ycoord, lcolor){
hpts <- chull(x = xcoord, y = ycoord)
hpts <- c(hpts, hpts[1])
lines(xcoord[hpts], ycoord[hpts], col = lcolor)
}
plot(EV_p_exceed_transient[,1], total_costs[,1])
plot(EV_p_exceed_transient[,1], costs[,1], log = 'x')
Plot_ConvexHull(EV_p_exceed_transient.v, costs.v, "black")
getwd()
min(EV_p_exceed_transient)
hist(EV_p_exceed_transient)
length(which(EV_p_exceed_transient==min(EV_p_exceed_transient)))
EV_p_exceed_transient[1]
test <- sort(EV_p_exceed_transient)
hist(test)
test[1]
test[2]
test[3]
test[4]
test[5]
getwd()
hist(EV_p_exceed_transient)
load("~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Parametric_Uncertainty/Parametric_Uncertainty.RData")
setwd("~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Parametric_Uncertainty/Figures/Objective Tradeoffs")
source('~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Parametric_Uncertainty/Figures/Objective Tradeoffs/Uncertainty_tradeoffs.R', echo=TRUE)
png("test.png")
plot(EV_p_exceed_transient.v, costs.v, log = 'x')
dev.off()
png("test2.png")
plot(EV_p_exceed_transient, costs, log = 'x')
dev.off()
getwd()
plot.marginals <- function(chain, qlo=0.025, qhi=0.975, smoothing=1, truncate.kde=TRUE)
{
N <- dim(chain)[1]; np <- dim(chain)[2]
ncol <- floor(sqrt(np))
nrow <- ceiling(np/ncol)
par(mfrow=c(nrow,ncol))
for(i in 1:np) {
x <- chain[,i]
est <- if(truncate.kde){bkde(x,bandwidth=smoothing*dpik(x),range.x=range(x))} else {bkde(x,bandwidth=smoothing*dpik(x))} # from KernSmooth
#est <- if(truncate.kde, {density(x,adjust=smoothing,cut=0)} else {density(x,adjust=smoothing))}
y <- est$y
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5*max(y)) )
# plot pdf (smoothed kernel density estimate)
plot.default(NA, xlim=range(x), ylim=c(0,max(y)), main=colnames(chain)[i], xlab=colnames(chain)[i], ylab="pdf", frame=F, cex.axis=1.2, cex.lab=1.2, cex.main=1.4)
if(truncate.kde) {
polygon(c(min(x),est$x,max(x)),c(0,y,0),col="gray")
} else {
polygon(est,col="gray")
}
# plot mean and qlo/50/qhi quantiles
lines(c(mean(x),mean(x)), c(0,1.05*max(y)), col="red")
lines(c(median(x),median(x)), c(0,1.05*max(y)), col="blue", lty="dashed")
lines(c(quantile(x,qlo),quantile(x,qlo)), c(0,1.05*max(y)), col="blue", lty="dotted")
lines(c(quantile(x,qhi),quantile(x,qhi)), c(0,1.05*max(y)), col="blue", lty="dotted")
}
}
plot.marginals((Parameters))
source("../../../Uncertainty_SLR_GEV/SLR_Module/Rejection_Sampling/plotutils.R")
plot.marginals((Parameters))
getwd()
pdf("test.pdf")
plot.marginals(Parameters)
dev.off()
pdf("test2.pdf")
plot.pairs(Parameters)
dev.off()
source("../../../Uncertainty_SLR_GEV/SLR_Module/Rejection_Sampling/plotutils.R")
pdf("test2.pdf")
plot.pairs(Parameters)
dev.off()
setwd("~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Uncertainty_SLR_GEV/Figures/Pairs Plots")
