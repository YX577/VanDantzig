?polygon
polygon(X[X.chull,], col = "red")
class(X)
######################################################
######################################################
#
# parallel_plot_functions.r   16 Jan. 2015
#
# Functions for plotting a parallel axis plot.
#
# NOTE: There's still a bug in this code that
# prevents a full matrix of objectives from being
# plotted.  I'm still working on it, so stay tuned!
#
######################################################
normalize.objective <- function(obj.mat) {
apply(obj.mat, 2, function(x) ((x-min(x))/max(x-min(x))))
}
plot.parallel <- function(obj, labels=colnames(obj), col.obj=par("fg"), col.line=par("fg"), col.text=par("fg"), add=F, ...) {
n.objs <- ncol(obj)
if (!add) {
plot.new()
par(xpd=T)
par(mar=c(6,3.5,4,2.5)+0.1)
plot.window(xlim=c(1,n.objs), ylim=c(0,1))
axis(1, at=1:n.objs, labels=F, line=2)
mtext(1, at=1:n.objs, text=labels, col=col.text, line=3, font=2)
arrows(x0=0.9, y0=0.05, y1=0.95, length=0.1)
mtext("Preference", 2)
par(xpd=F)
abline(v=1:n.objs, lty=1, lwd=1.5)
#axis(2,at=seq(0,1,l=5), line=2)
}
cat(nrow(obj))
invisible(sapply(1:nrow(obj), function(this.item) lines(obj[this.item,], col=col.line[this.item], ...)))
lines(1:n.objs, rep(1, n.objs), lty=2, lwd=1.5)
#abline(h=1, lty=2, lwd=1.5)
}
a <- rnorm(5,30,5)
b <- rnorm(5,10,5)
c <- rnorm(5,50,10)
x <- rnorm(5,10,1)
y <- rnorm(5,20,1)
z <- rnorm(5,100,20)
obj.mat <- cbind(a,b,c,x,y,z)
obj.mat.norm <- normalize.objective(obj.mat)
plot.parallel(obj.mat.norm)
############################################
##  file: cost-benefit-slr-adaptation.R
##   R Example of a Sea Level Risk Model
##   - Cost-Benefit analysis of sea wall heightening
##   - Based on:
##	 - van Dantzig D (1956) Economic Decision Problems for flood prevention.
##	 - Econometrica 24:276-287
######################################################
##  authors: Ryan Sriver and Klaus Keller
##  copyright by the authors
##  distributed under the GNU general public license
##  no warranty
##################################################
# version: 3
#   last changes: KK (klaus@psu.edu)
#   Feb 14 2015
##################################################
# how to run:
# - save the file in a directory
# - go to the directory with this file
# - open R
# - type: source('cost-benefit-slr-adaptation.R')
# - open the new pdf files to analyze the results
############################################
# Define parameters as given in van Dantzig
#	- check with Table 4.1 in ref 2
# flood frequency in 1/a at zero height increase
p_zero_p=0.0038
# rate of exponential flood frequency decrease per m height increase
alpha_p=2.6
# costs of flooding in Gulders (include the "factor of two" from the ms
V_p=2e10
# effective discount rate in % per year, this is net of increase in value damages
delta_prime_p=0.02
# costs of heightening per m in gulders.
k_p=4.2e7
# ime horizon to the next revision of the dike (in years), from paper
T=75
# subsidence rate in m/a, from the paper. Equivalent to 0.7 m per century.
subs_rate=0.007
# Example sea_level rise rate in m/a. Equivalent to 0.9 m per century
sea_level_rate=0.009
# time scale
beta_p=alpha_p*1
# parameters for the probabilistic analysis of SLR
# SL_rates in m/a
SL_rate_samples=c(0.003, 0.009, 0.015)
# number of samples
N_SOW=length(SL_rate_samples)
# probabilty of each SOW, assumed so far equally likely
p_SOW=rep(1/N_SOW, N_SOW)
# perform simple risk and economic analysis
# case 1: without uncertainty
# determine optimal X: (eqs. 12 and 14 in paper)
C=(100*p_zero_p*V_p*alpha_p)/((delta_prime_p*100-beta_p)*k_p) *
(1-exp(-(delta_prime_p*100-beta_p)*T/100)) /
(1-exp(-delta_prime_p*100*T/100));
X_analytical=1/alpha_p*log(C)
print(X_analytical)
# costs of heightening per m in gulders.
k_p=4.2e7
# ime horizon to the next revision of the dike (in years), from paper
T=75
# subsidence rate in m/a, from the paper. Equivalent to 0.7 m per century.
subs_rate=0.007
# Example sea_level rise rate in m/a. Equivalent to 0.9 m per century
sea_level_rate=0.009
# time scale
beta_p=alpha_p*1
# parameters for the probabilistic analysis of SLR
# SL_rates in m/a
SL_rate_samples=c(0.003, 0.009, 0.015)
# number of samples
N_SOW=length(SL_rate_samples)
# probabilty of each SOW, assumed so far equally likely
p_SOW=rep(1/N_SOW, N_SOW)
# perform simple risk and economic analysis
# case 1: without uncertainty
# determine optimal X: (eqs. 12 and 14 in paper)
C=(100*p_zero_p*V_p*alpha_p)/((delta_prime_p*100-beta_p)*k_p) *
(1-exp(-(delta_prime_p*100-beta_p)*T/100)) /
(1-exp(-delta_prime_p*100*T/100));
X_analytical=1/alpha_p*log(C)
print(X_analytical)
# case 2:  with uncertainty
# considerd range of Deike heigtening in meters
X=seq(0,10,by=0.05)
# considered time horison, in annual increments
time=seq(0,T,by=1)
# Define variables
p_exceed=array(NA,dim=c(length(X)))
costs=array(NA,dim=c(length(X)))
NPV_expected_losses=array(NA,dim=c(length(X)))
EV_p_exceed_transient=array(NA,dim=c(length(X)))
Total_flood_frequency=array(NA,dim=c(length(X)))
total_costs=array(NA,dim=c(length(X)))
discount_factor=array(NA, dim=c(length(time)))
effective_height=array(NA, dim=c(length(X),length(time)))
p_exceed_transient=array(NA, dim=c(length(X),length(time)))
NPV_costs_flooding=array(NA, dim=c(length(X),length(time)))
subsidence=subs_rate*time
sea_level_rise=sea_level_rate*time
?subset
library(scatterplot3d)
set.seed(1234)
x <- rnorm(30, 10, 3)
y <- rnorm(30, 20, 3)
z <- rnorm(30, 50, 5)
scatterplot3d(x, y, z)
scatterplot3d(x, y, z, pch=15, color="blue", main="This is a title",
xlab="X-label", ylab="Y-label", zlab="Z-label")
scatterplot3d(x, y, z, pch=21, color="blue", bg="red", main="This is a title",
xlab="X-label", ylab="Y-label", zlab="Z-label",
type="h", angle=58)
my.2dpoints <- my.scatterplot$xyz.convert(10, 20, 50)
text(my.2dpoints$x, my.2dpoints$y, "Mean x-y-z (10,20,50)", pos=4, font=2)
my.scatterplot <- scatterplot3d(x, y, z,
pch=21, color="blue", bg="red", main="This is a title",
xlab="X-label", ylab="Y-label", zlab="Z-label",
type="h", angle=58)
my.scatterplot$points3d(10, 20, 50, col="green", pch=17, cex=2.2)
my.2dpoints <- my.scatterplot$xyz.convert(10, 20, 50)
text(my.2dpoints$x, my.2dpoints$y, "Mean x-y-z (10,20,50)", pos=4, font=2)
rm(list = ls())
graphics.off()
T = 298.15 #K       # Variables can be assigned values using "=" or "<-" (arrow sign)
S = 35 #psu
K_B = exp((-8966.9 - 2890.51 * S^0.5 - 77.942 * S
+ 1.726 * S^1.5 - 0.0993 * S^2)/T + (148.0248
+ 137.194 * S^0.5 + 1.62247 * S)
+ (-24.4344 - 25.085 * S^0.5 - 0.2474 * S) * log(T)  # 'log' is fuction for natural log in R
+ (0.053105 * S^0.5 * T))                            # log10 is function for base 10 log
rm(list = ls())
graphics.off()
T = 298.15 #K       # Variables can be assigned values using "=" or "<-" (arrow sign)
S <- 35 #psu
K_B = exp((-8966.9 - 2890.51 * S^0.5 - 77.942 * S
+ 1.726 * S^1.5 - 0.0993 * S^2)/T + (148.0248
+ 137.194 * S^0.5 + 1.62247 * S)
+ (-24.4344 - 25.085 * S^0.5 - 0.2474 * S) * log(T)  # 'log' is fuction for natural log in R
+ (0.053105 * S^0.5 * T))                            # log10 is function for base 10 log
pK_B = -log10(K_B)                        # (pH at which both species is at 50% equilibrium)
pH = seq(4, 12, by = 0.5)                 # Set vector (sequence) of pH values from 4 - 12 in increments of 0.5
pH_K = 10^-pH                             # set vector of Hydrogen activity, aH+, to achieve pH
ratio = K_B / pH_K                        # Ratio of Borate to Boric Acid (products to reactants)
Borate = (ratio / (ratio + 1)) * 100      # Percent of total solution of Borate ion
Boric_Acid =  100 - Borate                # Percent of total solution of Boric Acid (subtract from 100 to get inverse)
Proportion <- array(NA, dim = c(17,3))    # This creates a blank table with 3 columns and 17 rows, and initializes with
View(Proportion)
View(Proportion)
colnames(Proportion) <- c("pH", "% Boric Acid", "% Borate Ion")   # Sets the names of the columns in the table
View(Proportion)
Proportion[,1] <- pH              # You can isolate individual rows/columns of a matrix/table using the following notation:
Proportion[,2] <- Boric_Acid
Proportion[,3] <- Borate
View(Proportion)                  # Lets you view a variable in a new window
?lty
?col
plot(pH, Boric_Acid,                                # "plot" function begins the plot, with the x and y variable in that order
type = 'l',                                    # "type = 'l'" signifies a line plot
ylim = c(0,100),                               # "ylim" manually sets the min and max y-axis dimensions
lwd = 2,                                       # "lwd" = linewidth. Default is 1, increasing numbers get thicker
pch = 19,                                      # "pch" = point character? Google it (or type '?pch'), there are multiple different point styles to choose
cex = 0.5,                                     # "cex" = character expansion (increases/decreases point size). Default = 1
ylab = "% of total DIC",                       # "ylab" = y-axis label
xlab = "pH")                                   # "xlab" = x-axis label
abline(v = pK_B, col = "gray")                      # "abline" sets straight lines. v=vertical, h=horizontal. You set the value of the y/x intercept
abline(h = 50, col = "gray")
points(pH, Borate, type = 'o',                      # "points" tells the plot to create scatterplot with x=pH, y=Borate. Type "o" is connected points
lty = 2,                                     # "lty" = linetype. Default is 1 (regular line), 2 is dashed
col = "blue",                                # "col" = color. R has multiple colors built in that can be called by name
pch = 19,
cex = 0.5,
lwd = 2)
legend(x="topleft",                                 # "legend" creates a legend. "Topleft" indicates location on plot
inset=c(0.05,0.1),                           # inset the legend into graph
legend=c("Boric Acid", "Borate Ion"),        # sets the name for the elements in the legend
col=c("black","blue"),
lty=c("solid","dashed"),                     # sets linetypes for legend. "solid" corresponds with "Boric Acid"
lwd=c(2,2,2)
)
box(lwd = 2)                                        # "box" just puts a box outline around the plot. Here I wanted to make the outline thicker
test <- seq(1,10, 1)
plot(rnorm(100))
plot(rnorm(100), col = "red")
plot(hist(rnorm(100)))
plot(hist(rnorm(100)))
plot(rnorm(100))
point(rnorm(1000), col = "green")
points(rnorm(1000), col = "green")
?rm.NA
a <- seq(1,20, 1)
b = function(x){
a^2 + 2*a + 2
}
b = function(a){
a^2 + 2*a + 2
}
b
b(a)
plot(a, b(a))
plot(b(a), b(a)/2*b(a))
test <- rnorm(100)
test[100:120] = NA
View(test)
test2 <- sample(test, 1000)
test2 <- sample(test, 1000, replace = T)
View(test2)
?sample
?if
?if
else
help(if)
test2 <- if test =/ NA, sample(test, 1000, replace = T)
?na.omit
test2 <- na.omit(test)
View(test2)
test <- rnorm(100)
test[101:120] = NA
test2 <- na.omit(test)
"test"
print(test)
students <- data.frame(people=c("Lily", "Bo", "Jen", "Omar", "Sara", "Jack", "Ting"), team=c("Red", "Blue", "Green", "Red", "Blue", "Green", "Red"), number=c(1,2,3,5,2,7,1))
View(students)
scores <- data.frame(team=c("Black", "Blue", "Green", "Indigo", "Orange", "Red", "Violet", "White", "Yellow"), score1=c(90,96,93,88,82,84,95,89,79), score2=c(5,5,4,4,5,3,5,5,3))
View(scores)
score1 <- rep(NA, 7)
score2 <- rep(NA, 7)
students <- data.frame(students, score1, score2)
students <- data.frame(people=c("Lily", "Bo", "Jen", "Omar", "Sara", "Jack", "Ting"), team=c("Red", "Blue", "Green", "Red", "Blue", "Green", "Red"), number=c(1,2,3,5,2,7,1))
students <- data.frame(students, score1, score2)
View(students)
students$score1 <- scores$score1[match(students$team, scores$team)]
View(students)
students$score2 <- scores$score2[match(students$team, scores$team)]
students$score2 <- scores$score2[match(students$team, scores$team)]
View(students)
library(ggmap)
library(ggplot2)
library(ggmap)
install.packages("ggplot2")
library(ggmap)
library(zoo)
library(extRemes)
library(fExtremes)
load("~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Uncertainty_SLR_GEV/SLR_GEV.RData")
matplot(gev, 1-q, log= 'y', type = 'l',lty = 1, col = "black")
matplot(gev[,1], 1-q, log= 'y', type = 'l',lty = 1, col = "black")
matplot(gev[,1], 1-q, log= 'y', type = 'l',lty = 1, col = "black")
matplot(gev, 1-q, log= 'y', type = 'l',lty = 1, col = "black")
matplot(gev, 1-q, log= 'y', type = 'l',lty = 1, col = rgb(0,0,0,0.05))
dim(EV_p_exceed_transient)
hist(EV_p_exceed_transient[1,])
?rnorm
test <- rnorm(1000, 0, 1)
hist(test)
test
test
?sample
getwd()
setwd("~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Uncertainty_SLR_GEV/Sensitivity_Analysis/Sobol/SALib")
data <- read.table("sobolParameterSets.txt", sep = '\t')
View(data)
data <- read.table("sobolParameterSets.txt", sep = ' ')
hist(data[,1])
hist(data[,2])
setwd("~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Parametric_Uncertainty/Sensitivity_Analysis/Sobol/SALib")
open("Sobol_Uncertainty_SALib copy.R")
rm(list = ls())
graphics.off()
library(compiler)
enableJIT(3)
# Set seed for reproducibility
set.seed(1)
# Number of observations
# Number of observations
n_obs = 10^4
# Set prior parameter values - Section 6 "The Doubtful Constants," van Dantzig (1956)
source("../../../Scripts/priors.R")
Sobol <- read.table("sobolParameterSets.txt", sep = ' ', header = FALSE)
hist(Sobol[,1])
quantile(Sobol[,1],.5)
quantile(Sobol[,1],.9)
ecdf(Sobol[,1])
plot(ecdf(Sobol[,1]))
rm(list = ls())
graphics.off()
# Set seed for reproducibility
set.seed(1)
# Number of observations
n_obs = 10^4
# Prior parameter values - Section 6 "The Doubtful Constants," van Dantzig (1956)
source("../../../Scripts/priors.R")
source("Scripts/LHS.R")
plot(ecdf(Parameters[1]))
plot(ecdf(Parameters[,1]))
n_samp = 1000*(length(priors)+1)
n_samp = 1000*(count(priors)+1)
length(priors)
n_samp = 1000*(length(priors)+1)
1000*(length(priors)+1)
n_samp = 2*1000*(length(priors)+1)
2000*12
?Uniform
test <- punif(16000, 0, 1)
hist(test)
test <- runif(16000, 0, 1)
hist(test)
test <- dunif(16000, 0, 1)
hist(test)
test <- punif(16000, 0, 1)
hist(test)
plot(ecdf(test))
quantile(test,0.5)
test <- qunif(16000, 0, 1)
q = seq(0,1, length.out = n_samp)
hist(q)
quantile(q, 0.5)
quantile(q, 0.9)
quantile(q, 0.99)
test <- qunif(q, 0, 1)
hist(test)
test <- qunif(q, 0, 100)
hist(test)
quantile(test, .5)
rm(test)
rm(list = ls())
graphics.off()
library(compiler)
enableJIT(3)
# Set seed for reproducibility
set.seed(1)
# Number of observations
n_obs = 10^4
# Set prior parameter values - Section 6 "The Doubtful Constants," van Dantzig (1956)
source("../../../Scripts/priors.R")
n_samp = 2*1000*(length(priors)+1)
# Sample uniformly between [0,1]
q = seq(0,1, length.out = n_samp)
source("../../../Scripts/LHS.R")
length(q)
9[1500]
q[1500]
length(ecdf(Parameters[,1]))
Sobol = array(NA, dim = c(length(n_samp), length(priors)))
Sobol = array(NA, dim = c(n_samp, length(priors)))
for(i in 1:n_samp){
Sobol[,i] = quantile(ecdf(Parameters[,i], q))
}
for(i in 1:n_samp){
Sobol[,i] = quantile(ecdf(Parameters[,i]), q)
}
for(i in length(priors)){
Sobol[,i] = quantile(ecdf(Parameters[,i]), q)
}
View(Sobol)
16000*7
hist(Sobol[,1])
names(Sobol) <- names(priors)
View(Sobol)
names(Sobol) <- names(priors)
View(Sobol)
names(priors)
?as.data.frame
names(as.data.frame(Sobol)) <- names(priors)
names(
as.data.frame(Sobol)
hist(Sobol[,1])
hist(Parameters[,1])
Sobol = as.data.frame(Sobol)
names(Sobol) <- names(priors)
View(Sobol)
source('~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Parametric_Uncertainty/Sensitivity_Analysis/Sobol/SALib/Sobol_Uncertainty_SALib.R', echo=TRUE)
setwd("~/Documents/Grad/SCRiM/MORDM/OpenMORDM Supplemental Material Rev2")
library(OpenMORDM)
library(lhs)
rm(list = ls())
graphics.off()
setwd("/Users/puo112/Documents/Grad/SCRiM/Scripts")
#source("X_obj.base.R")
source("X_Objectives.R")
# Step 1. Generate and plot the Pareto approximate set
n <- 4
nvars = 1
nobjs = 4
nconstrs = 0
nsamples = 1000
param_names = c("p_zero_p", "alpha_p", "V_p", "delta_prime_p", "k_p", "subs_rate", "sea_level_rate")
baseline_factors = c(0.0038, 2.6, 2e10, 0.02, 4.2e7, 0.002, 0.008)
param_bounds = matrix(c(c(0.00145547134677826, 0.0103291400402778),
c(2.20172036260802, 3.02823733602667),
c(16272295575.9362, 23796446374.7584),
c(0.0133436380576922, 0.0294432466548024),
c(23690525.9101367, 57131421.2684883),
c(0.00130539457325652, 0.00293557198176056),
c(0.00537329522765272, 0.0123023565105383)), nrow=2)
palette = colorRampPalette(c("red", "yellow", "green"))(100)
bounds = matrix(nrow=2,ncol=nvars)
bounds[1,] = rep(0,nvars)
bounds[2,] = rep(0.1,nvars)
# Step 1. Generate and plot the Pareto approximate set
names = c("Discounted Total Costs", "Investment Costs", "Discounted Damages", "Reliability")
problem <- define.problem(X_Obj.base, nvars, nobjs, nconstrs,
bounds=matrix(rep(range(0, 10), nvars), nrow=2),
names=names,
maximize=c("Reliability"),
epsilons=c(0.0001,0.0001,0.000001,0.000001))
mordm.plot.parallel()
source('~/Documents/Grad/SCRiM/MORDM/OpenMORDM Supplemental Material Rev2/mordm_eval.R', echo=TRUE)
result <- lhsample(1000, problem)
explore(result, nobjs=n)
library(rgl)
explore(result, nobjs=n)
install.packages("rglwidget")
source('~/Documents/Grad/SCRiM/MORDM/OpenMORDM Supplemental Material Rev2/mordm_eval.R', echo=TRUE)
mordm.plot.parallel()
mordm.plot.parallel()
mordm.plot(data, color="Reliability", palette=rev(palette))
mordm.plot(problem, color="Reliability", palette=rev(palette))
source('~/Documents/Grad/SCRiM/MORDM/OpenMORDM Supplemental Material Rev2/mordm_eval.R', echo=TRUE)
explore(result, nobjs=n)
#data <- borg.optimize(problem, 100)
result <- lhsample(1000, problem)
#palette <- colorRampPalette(c("green", "yellow", "red"))(100)
#mordm.plot(data, color="Reliability", palette=palette)
#mordm.plot.parallel()
#mordm.obj <- data.frame(X_Obj.uncertainty(X))
explore(result, nobjs=n)
mordm.plot(data, color="Reliability", palette=rev(palette))
test <- Objectives[1:5000,]
explore(result, nobjs=n)
mordm.plot(data, color="Reliability", palette=rev(palette))
mordm.plot(problem, color="Reliability", palette=rev(palette))
mordm.plot.parallel()
source('~/Documents/Grad/SCRiM/MORDM/OpenMORDM Supplemental Material Rev2/mordm_eval.R', echo=TRUE)
explore(result, nobjs=n)
result <- lhsample(1000, problem)
explore(result, nobjs=n)
setwd("~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Uncertainty_SLR_GEV/Sensitivity_Analysis/Sobol/SALib")
rm(list = ls())
graphics.off()
library(compiler)
enableJIT(3)
# Set seed for reproducibility
set.seed(1)
# Number of observations
n_obs = 10^4
# Read in Sobol Samples
source("Scripts/priors.R")
source("Scripts/LHS.R")
rm(list = ls())
graphics.off()
library(compiler)
enableJIT(3)
# Set seed for reproducibility
set.seed(1)
# Number of observations
n_obs = 10^4
# Read in Sobol Samples
Sobol <- read.table("sobolParameterSets.txt", sep = ' ', header = FALSE)
names(Sobol) <- c("V_p", "delta_prime_p", "k_p", "subs_rate", "a", "b", "c", "t.star", "c.star", "xi", "mu", "sigma")
n_Sobol = length(Sobol[,1])
# Source sea level rise and storm surge modules
source("Scripts/Sobol_slr.R")
source("Scripts/Sobol_exceedance.R")
