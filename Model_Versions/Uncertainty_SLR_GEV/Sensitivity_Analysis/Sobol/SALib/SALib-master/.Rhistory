}
for (j in 1:length(time)) {
sea_level_rise[j,] = Parameters$sea_level_rate*time[j]
}
###################################
# file: vanDantzig_Uncertainty.R
###################################
# Author and copyright: Perry Oddo
# Pennsylvania State University
# poddo@psu.edu
#
# Distributed under GNU general public license
# No warranty
#
# Adapted from: cost-benefit-slr.R
# Authored by Ryan Sriver and Klaus Keller
# Pennsylvania State University
#
# Based on: van Dantzig D (1956) Economic Decision Problems for flood prevention.
# Econometrica 24:276-287
###################################
# Last modified: 9 July, 2015
###################################
# Set working directory
setwd("~/Documents/Grad/SCRiM/Scripts")
# Compile
rm(list = ls())
graphics.off()
library(compiler)
enableJIT(3)
# Set seed
set.seed(1)
# Number of observations
n_obs = 10^4
# Set prior parameter values - Section 6 "The Doubtful Constants," van Dantzig (1956)
p_zero_p = 0.0038
alpha_p = 2.6
V_p = 2e10
delta_prime_p = 0.02
k_p = 4.2e7
subs_rate = 0.007
sea_level_rate = 0.009
priors <- data.frame(p_zero_p, alpha_p, V_p, delta_prime_p, k_p, subs_rate, sea_level_rate)
# Sample parameters with LHS function
# Creates data.frame with parameter PDFs
source("LHS.R")
# van Dantzig problem setup:
# Time horizon to the next revision of the dike (in years), from paper
T = 75
# time scale
beta_p = alpha_p*subs_rate
# considered range of Deike heigtening in meters
X = seq(0,10,by=0.05)
# considered time horizon, in annual increments
time = seq(0,T,by=1)
# Define variables
p_exceed = array(NA, dim = c(length(X), n_obs))
costs = array(NA, dim = c(length(X), n_obs))
NPV_expected_losses = array(NA, dim = c(length(X), n_obs))
EV_p_exceed_transient = array(NA, dim = c(length(X), n_obs))
Total_flood_frequency = array(NA, dim = c(length(X), n_obs))
total_costs = array(NA, dim = c(length(X), n_obs))
discount_factor = array(NA, dim = c(length(time), n_obs))
effective_height = array(NA, dim = c(length(X), length(time), n_obs))
p_exceed_transient = array(NA, dim = c(length(X),length(time), n_obs))
NPV_costs_flooding = array(NA, dim = c(length(X),length(time), n_obs))
subsidence = array(NA, dim = c(length(time), n_obs))
sea_level_rise = array(NA, dim = c(length(time), n_obs))
# Run model for 10,000 SOW
for(i in 1:length(X)) {
# analyze for each considered Deike heightening (eq. 1 in paper)
p_exceed[i,]= Parameters$p_zero_p*exp(-(Parameters$alpha_p)*X[i])
for (j in 1:length(time)) {
# subsidence rate over time horizon
subsidence[j,] = Parameters$subs_rate*time[j]
#sea level rise over time horizon
sea_level_rise[j,] = Parameters$sea_level_rate*time[j]
# *** Surge change over time horizon
#storm_surge[j,] = Parameters$storm_surge * time[j]
# analze for each year of the initial time period
year =j-1
#losses in the future are discounted at the annual net discount rate
discount_factor[j,] = 1/(1+Parameters$delta_prime_p)^year
#The effective deike height decreases with subsidence and sea-level rise.
effective_height[i,j,] = X[i] - subsidence[j,] - sea_level_rise[j,]
# For a stationary flooding frequency, we can evaluate the annual flooding
#frequency with the old observeations and the new effective height.
p_exceed_transient[i,j,] = Parameters$p_zero_p*exp(-(Parameters$alpha_p)*effective_height[i,j,])
#The net present value of the losses per year are the product of the
#frequency of flooding per year, the damages per flood, and the discount factor.
NPV_costs_flooding[i,j,] = p_exceed_transient[i,j,]*Parameters$V_p*discount_factor[j,]
}
#The costs of building the dike increase linearly with respect to height.
costs[i,] = Parameters$k_p*X[i]
}
#The total discounted expected losses are the sum of the discounted expected annual losses.
#Apply sum function over parameters sets
NPV_expected_losses = apply(NPV_costs_flooding, c(1,3), sum)
#The average annual flood frequency is the mean the annual flood frequencies.
#EV_p_exceed_transient[i,] = mean(p_exceed_transient[i,,])
EV_p_exceed_transient = apply(p_exceed_transient, c(1,3), mean)
#The total flood frequency over the life-time of the project is the sum of the flood frequencies,
#assuming independence, as in the original paper
#Total_flood_frequency[i,] = (sum(p_exceed_transient[i,,]))
Total_flood_frequency = apply(p_exceed_transient, c(1,3), sum)
for(i in 1:length(X)){
#The total costs that depend on the deike height. Note that the fixed
#costs of setting up the deike heightening as well as the effects of
#deike height on costs beyond the time horizon are neglected
total_costs[i,] = costs[i,] + NPV_expected_losses[i,]
}
# Baseline model data frame for 4 Objectives
# Load baseline model
source("Baseline_curves.R")
Objectives.base <- data.frame(total_costs.base, costs.base, NPV_expected_losses.base, EV_p_exceed_transient.base)
# Uncertainty data frame - combine matrices into single vector:
total_costs.v = unlist(list(total_costs))
costs.v = unlist(list(costs))
NPV_expected_losses.v = unlist(list(NPV_expected_losses))
Total_flood_frequency.v = unlist(list(Total_flood_frequency))
EV_p_exceed_transient.v = unlist(list(EV_p_exceed_transient))
Objectives <- data.frame(total_costs.v, costs.v, NPV_expected_losses.v, EV_p_exceed_transient.v)
# Load curves averaged for each dike height, X:
source("Mean_curves.R")
10^10
2e+10/10^10
2 * 1e+10
V_p = 2 * 1e+10           # Value of goods protected by dike (includes "factor of 2" for cost of human life)
rm(V_p)
V_p = 2 * 1e+10           # Value of goods protected by dike (includes "factor of 2" for cost of human life)
rm(list = ls())
source('~/Documents/Grad/SCRiM/Scripts/vanDantzig_Uncertainty.R', echo=TRUE)
source('~/Documents/Grad/SCRiM/Scripts/vanDantzig_Uncertainty.R', echo=TRUE)
source('~/Documents/Grad/SCRiM/Scripts/Fig1_Baseline_Uncertainty.R', echo=TRUE)
# Set working directory
setwd("~/Documents/Grad/SCRiM/Scripts")
# Compile
rm(list = ls())
graphics.off()
library(compiler)
enableJIT(3)
# Number of observations
n_obs = 10^4
# Set prior parameter values - Section 6 "The Doubtful Constants," van Dantzig (1956)
p_zero_p = 0.0038
alpha_p = 2.6
V_p = 2e10
source('~/Documents/Grad/SCRiM/Scripts/vanDantzig_Uncertainty.R', echo=TRUE)
source('~/Documents/Grad/SCRiM/Scripts/vanDantzig_Uncertainty.R', echo=TRUE)
1/8
min(Parameters)
sapply(1:7, function(x){
max(Parameters[x])
}
)
sapply(1:7, function(x){
min(Parameters[x])
})
quartile(Parameters[1], 0)
quantile(Parameters[1], 0)
quantile(Parameters[,1], 0)
rm(list = ls())
graphics.off()
# Set seed for reproducibility
set.seed(1)
# Number of observations
n_obs = 10^4
# Prior parameter values - Section 6 "The Doubtful Constants," van Dantzig (1956)
p_zero_p = 0.0038         # Initial flood frequency (1/yr) with zero height increase
alpha_p = 2.6             # Exponential flood frequency constant
V_p = 2 * 1e+10           # Value of goods protected by dike (includes "factor of 2" for cost of human life)
delta_prime_p = 0.02      # Discount rate (percent/year)
k_p = 4.2e7               # Cost of heightening dikes by 1 meter
subs_rate = 0.007         # Rate of land subsidence (meter/year)
sea_level_rate = 0.009    # Rate of sea level rise (meter/year)
# Sample parameters with LHS function
# Creates data.frame with parameter PDFs
source("LHS.R")
min_param = sapply(1:length(Parameters), function(x) {
quantile(Parameters[,x], 0)
})
min_param
max_param = sapply(1:length(Parameters), function(x) {
quantile(Parameters[,x], 1)
})
?write
getwd()
setwd("..")
ls
list.files()
setwd("Sensitivity Analysis/Sobol/SALib/")
write(c(names(Paramters), min_param, max_param),
file = "params.txt",
ncolumns = 3,
sep = "\t")
write(c(names(Parameters), min_param, max_param),
file = "params.txt",
ncolumns = 3,
sep = "\t")
write(c(names(Parameters), min_param, max_param),
file = "params.txt",
nrows = 7,
sep = "\t")
params = data.frame(names(Parameters), min_param, max_param)
View(params)
?write.table
write.table(params,
file = "params.txt",
ncolumns = 3,
col.names = FALSE,
sep = "\t")
write.table(params,
file = "params.txt",
col.names = FALSE,
sep = "\t")
getwd()
write.table(params,
file = "params.txt",
col.names = FALSE,
sep = "\t")
write.table(params,
file = "params.txt",
quote = FALSE,
col.names = FALSE,
sep = "\t")
write.table(params,
file = "params.txt",
quote = FALSE,
col.names = FALSE,
row.names = FALSE,
sep = "\t")
getwd()
setwd("SALib-master/")
rm(list = ls())
graphics.off()
library(compiler)
enableJIT(3)
# Set prior parameter values - Section 6 "The Doubtful Constants," van Dantzig (1956)
source("Scripts/priors.R")
priors <- data.frame(p_zero_p, alpha_p, V_p, delta_prime_p, k_p, subs_rate, sea_level_rate)
# Read in Sobol Samples
Sobol <- read.table("sobolParameterSets.txt", sep = ' ', header = FALSE)
names(Sobol) <- names(priors)
n_Sobol = length(Sobol[,1])
names = c("x1", "x2", "x3", "x4", "x5", "x6", "x7")
params = data.frame(names, min_param, max_param)
setwd("Sensitivity Analysis/Sobol/SALib/")
getwd()
setwd("~/Users/puo112/Documents/Grad/SCRiM/Sensitivity Analysis/Sobol/SALib")
setwd("~/Documents/Grad/SCRiM/Sensitivity Analysis/Sobol/SALib")
# Compile
rm(list = ls())
graphics.off()
# Set seed for reproducibility
set.seed(1)
# Number of observations
n_obs = 10^4
# Prior parameter values - Section 6 "The Doubtful Constants," van Dantzig (1956)
p_zero_p = 0.0038         # Initial flood frequency (1/yr) with zero height increase
alpha_p = 2.6             # Exponential flood frequency constant
V_p = 2 * 1e+10           # Value of goods protected by dike (includes "factor of 2" for cost of human life)
delta_prime_p = 0.02      # Discount rate (percent/year)
k_p = 4.2e7               # Cost of heightening dikes by 1 meter
subs_rate = 0.007         # Rate of land subsidence (meter/year)
sea_level_rate = 0.009    # Rate of sea level rise (meter/year)
# Sample parameters with LHS function
# Creates data.frame with parameter PDFs
source("LHS.R")
source("Scripts/LHS.R")
source("Scripts/LHS.R")
min_param = sapply(1:length(Parameters), function(x) {
quantile(Parameters[,x], 0)
})
max_param = sapply(1:length(Parameters), function(x) {
quantile(Parameters[,x], 1)
})
names = c("x1", "x2", "x3", "x4", "x5", "x6", "x7")
params = data.frame(names, min_param, max_param)
write.table(params,
file = "params.txt",
quote = FALSE,
col.names = FALSE,
row.names = FALSE,
sep = "\t")
###################################
# file: params.R
###################################
# Author and copyright: Perry Oddo
# Pennsylvania State University
# poddo@psu.edu
###################################
# Generates parameter files for SALib
# Sobol Sensitivity analysis
####################################
# Set working directory
setwd("~/Documents/Grad/SCRiM/Sensitivity Analysis/Sobol/SALib")
# Compile
rm(list = ls())
graphics.off()
# Set seed for reproducibility
set.seed(1)
# Number of observations
n_obs = 10^4
# Prior parameter values - Section 6 "The Doubtful Constants," van Dantzig (1956)
p_zero_p = 0.0038         # Initial flood frequency (1/yr) with zero height increase
alpha_p = 2.6             # Exponential flood frequency constant
V_p = 2 * 1e+10           # Value of goods protected by dike (includes "factor of 2" for cost of human life)
delta_prime_p = 0.02      # Discount rate (percent/year)
k_p = 4.2e7               # Cost of heightening dikes by 1 meter
subs_rate = 0.007         # Rate of land subsidence (meter/year)
sea_level_rate = 0.009    # Rate of sea level rise (meter/year)
# Sample parameters with LHS function
# Creates data.frame with parameter PDFs
source("Scripts/LHS.R")
# Determine minimum/maximum Parameter values by finding 0% and 100% quantiles of distribution
min_param = sapply(1:length(Parameters), function(x) {
quantile(Parameters[,x], 0)
})
max_param = sapply(1:length(Parameters), function(x) {
quantile(Parameters[,x], 1)
})
names = c("x1", "x2", "x3", "x4", "x5", "x6", "x7")
params = data.frame(names, min_param, max_param)
# Write .txt table for parameter names and values
write.table(params,
file = "params.txt",
quote = FALSE,
col.names = FALSE,
row.names = FALSE,
sep = " ")
getwd()
rm(list = ls())
graphics.off()
library(compiler)
enableJIT(3)
# Set prior parameter values - Section 6 "The Doubtful Constants," van Dantzig (1956)
source("Scripts/priors.R")
priors <- data.frame(p_zero_p, alpha_p, V_p, delta_prime_p, k_p, subs_rate, sea_level_rate)
# Read in Sobol Samples
getwd()
Sobol <- read.table("sobolParameterSets.txt", sep = ' ', header = FALSE)
Sobol <- read.table("sobolParameterSets.txt", sep = ' ', header = FALSE)
names(Sobol) <- names(priors)
n_Sobol = length(Sobol[,1])
T = 75
# time scale
beta_p = alpha_p*subs_rate
# considered range of Deike heigtening in meters
X = seq(0,10,by=0.05)
# considered time horizon, in annual increments
time = seq(0,T,by=1)
# Define variables
p_exceed = array(NA, dim = c(length(X), n_Sobol))
costs = array(NA, dim = c(length(X), n_Sobol))
NPV_expected_losses = array(NA, dim = c(length(X), n_Sobol))
EV_p_exceed_transient = array(NA, dim = c(length(X), n_Sobol))
Total_flood_frequency = array(NA, dim = c(length(X), n_Sobol))
total_costs = array(NA, dim = c(length(X), n_Sobol))
discount_factor = array(NA, dim = c(length(time), n_Sobol))
effective_height = array(NA, dim = c(length(X), length(time), n_Sobol))
p_exceed_transient = array(NA, dim = c(length(X),length(time), n_Sobol))
NPV_costs_flooding = array(NA, dim = c(length(X),length(time), n_Sobol))
subsidence = array(NA, dim = c(length(time), n_Sobol))
sea_level_rise = array(NA, dim = c(length(time), n_Sobol))
# Run model for 10,000 SOW
for(i in 1:length(X)) {
# analyze for each considered Deike heightening (eq. 1 in paper)
p_exceed[i,]= Sobol$p_zero_p*exp(-(Sobol$alpha_p)*X[i])
for (j in 1:length(time)) {
# subsidence rate over time horizon
subsidence[j,] = Sobol$subs_rate*time[j]
#sea level rise over time horizon
sea_level_rise[j,] = Sobol$sea_level_rate*time[j]
# analze for each year of the initial time period
year =j-1
#losses in the future are discounted at the annual net discount rate
discount_factor[j,] = 1/(1+Sobol$delta_prime_p)^year
#The effective deike height decreases with subsidence and sea-level rise.
effective_height[i,j,] = X[i] - subsidence[j,] - sea_level_rise[j,]
# For a stationary flooding frequency, we can evaluate the annual flooding
#frequency with the old observeations and the new effective height.
p_exceed_transient[i,j,] = Sobol$p_zero_p*exp(-(Sobol$alpha_p)*effective_height[i,j,])
#The net present value of the losses per year are the product of the
#frequency of flooding per year, the damages per flood, and the discount factor.
NPV_costs_flooding[i,j,] = p_exceed_transient[i,j,]*Sobol$V_p*discount_factor[j,]
}
#The costs of building the dike increase linearly with respect to height.
costs[i,] = Sobol$k_p*X[i]
}
#The total discounted expected losses are the sum of the discounted expected annual losses.
#Apply sum function over Sobol sets
NPV_expected_losses = apply(NPV_costs_flooding, c(1,3), sum)
#The average annual flood frequency is the mean the annual flood frequencies.
#EV_p_exceed_transient[i,] = mean(p_exceed_transient[i,,])
EV_p_exceed_transient = apply(p_exceed_transient, c(1,3), mean)
#The total flood frequency over the life-time of the project is the sum of the flood frequencies,
#assuming independence, as in the original paper
Total_flood_frequency = apply(p_exceed_transient, c(1,3), sum)
for(i in 1:length(X)){
#The total costs that depend on the deike height. Note that the fixed
#costs of setting up the deike heightening as well as the effects of
#deike height on costs beyond the time horizon are neglected
total_costs[i,] = costs[i,] + NPV_expected_losses[i,]
}
source(file = "Scripts/Baseline_curves.R")
Objectives.base <- data.frame(total_costs.base, costs.base, NPV_expected_losses.base, EV_p_exceed_transient.base)
source("Scripts/Mean_curves.R")
exp_objectives <- data.frame(total_costs[min_ind_mean,], costs[min_ind_mean,], NPV_expected_losses[min_ind_mean,], EV_p_exceed_transient[min_ind_mean,])
write.table(exp_objectives, file = "objectiveValues.txt", sep = ' ', col.names = FALSE, row.names = FALSE)
names(Parameters)
setwd("~/Documents/Grad/SCRiM/Sensitivity Analysis/Sobol/SALib")
# Compile
rm(list = ls())
graphics.off()
# Set seed for reproducibility
set.seed(1)
# Number of observations
n_obs = 10^4
# Prior parameter values - Section 6 "The Doubtful Constants," van Dantzig (1956)
p_zero_p = 0.0038         # Initial flood frequency (1/yr) with zero height increase
alpha_p = 2.6             # Exponential flood frequency constant
V_p = 2 * 1e+10           # Value of goods protected by dike (includes "factor of 2" for cost of human life)
delta_prime_p = 0.02      # Discount rate (percent/year)
k_p = 4.2e7               # Cost of heightening dikes by 1 meter
subs_rate = 0.007         # Rate of land subsidence (meter/year)
sea_level_rate = 0.009    # Rate of sea level rise (meter/year)
# Sample parameters with LHS function
# Creates data.frame with parameter PDFs
source("Scripts/LHS.R")
# Determine minimum/maximum Parameter values by finding 0% and 100% quantiles of distribution
min_param = sapply(1:length(Parameters), function(x) {
quantile(Parameters[,x], 0)
})
max_param = sapply(1:length(Parameters), function(x) {
quantile(Parameters[,x], 1)
})
params = data.frame(names(Parameters), min_param, max_param)
getwd()
file = "SALib-master/SALib/test_functions/params/params.txt",
###################################
# file: params.R
###################################
# Author and copyright: Perry Oddo
# Pennsylvania State University
# poddo@psu.edu
###################################
# Generates parameter files for SALib
# Sobol Sensitivity analysis
####################################
# Set working directory
setwd("~/Documents/Grad/SCRiM/Sensitivity Analysis/Sobol/SALib")
# Compile
rm(list = ls())
graphics.off()
# Set seed for reproducibility
set.seed(1)
# Number of observations
n_obs = 10^4
# Prior parameter values - Section 6 "The Doubtful Constants," van Dantzig (1956)
p_zero_p = 0.0038         # Initial flood frequency (1/yr) with zero height increase
alpha_p = 2.6             # Exponential flood frequency constant
V_p = 2 * 1e+10           # Value of goods protected by dike (includes "factor of 2" for cost of human life)
delta_prime_p = 0.02      # Discount rate (percent/year)
k_p = 4.2e7               # Cost of heightening dikes by 1 meter
subs_rate = 0.007         # Rate of land subsidence (meter/year)
sea_level_rate = 0.009    # Rate of sea level rise (meter/year)
# Sample parameters with LHS function
# Creates data.frame with parameter PDFs
source("Scripts/LHS.R")
# Determine minimum/maximum Parameter values by finding 0% and 100% quantiles of distribution
min_param = sapply(1:length(Parameters), function(x) {
quantile(Parameters[,x], 0)
})
max_param = sapply(1:length(Parameters), function(x) {
quantile(Parameters[,x], 1)
})
params = data.frame(names(Parameters), min_param, max_param)
# Write .txt table for parameter names and values
write.table(params,
file = "SALib-master/SALib/test_functions/params/params.txt",
quote = FALSE,
col.names = FALSE,
row.names = FALSE,
sep = " ")
rm(list = ls())
graphics.off()
library(compiler)
enableJIT(3)
# Set prior parameter values - Section 6 "The Doubtful Constants," van Dantzig (1956)
source("Scripts/priors.R")
priors <- data.frame(p_zero_p, alpha_p, V_p, delta_prime_p, k_p, subs_rate, sea_level_rate)
# Read in Sobol Samples
getwd()
Sobol <- read.table("sobolParameterSets.txt", sep = ' ', header = FALSE)
getwd()
cd("SALib-master/")
setwd("SALib-master/")
la
ls
Sobol <- read.table("../sobolParameterSets.txt", sep = ' ', header = FALSE)
rm(Sobol)
source("Scripts/priors.R")
rm(list = ls())
graphics.off()
getwd()
library(compiler)
enableJIT(3)
# Set prior parameter values - Section 6 "The Doubtful Constants," van Dantzig (1956)
source("../Scripts/priors.R")
priors <- data.frame(p_zero_p, alpha_p, V_p, delta_prime_p, k_p, subs_rate, sea_level_rate)
Sobol <- read.table("../sobolParameterSets.txt", sep = ' ', header = FALSE)
names(Sobol) <- names(priors)
