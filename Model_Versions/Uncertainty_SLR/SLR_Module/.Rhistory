for(i in 1:85){
slr_test[i,] = sea_level_global(beta.dist[,1], beta.dist[,2], beta.dist[,3], beta.dist[,5], (beta.dist[,4]-2015), i) #+ res.boot_proj[i,]
}
### Plot
matplot(2016:2100, slr_test[,nrand], type = 'l', lty = 1, col= rgb(0,0,0,0.25),
ylab = "Sea Level [cm]", xlab = "Years")#, xlim = c(2015, (2015+75)))
box(lwd = 1.5)
lines(1:75, (.009*(1:75)), col = "red")
lines(1:75, (.9*(1:75)), col = "red")
lines(2016:2100, (.009*(1:75)), col = "red")
length(2016:2100)
lines(2016:2100, (.009*(1:85)), col = "red")
lines(2016:2100, (.09*(1:85)), col = "red")
lines(2016:2100, (.9*(1:85)), col = "red")
lines(2016:2100, (9*(1:85)), col = "red")
time = 2016:2100
slr_old = 9 * 1:85
lines(time, slr_old, col = "red")
matplot(2016:2100, slr_test, type = 'l', lty = 1, col= rgb(0,0,0,0.25),
ylab = "Sea Level [cm]", xlab = "Years")#, xlim = c(2015, (2015+75)))
matplot(2016:2100, slr_test, type = 'l', lty = 1, col= rgb(0,0,0,0.01),
ylab = "Sea Level [cm]", xlab = "Years")#, xlim = c(2015, (2015+75)))
test <- slr_test[85,]
plot(density(test))
for(i in 1:85){
slr_test[i,] = sea_level_global(0, beta.dist[,2], beta.dist[,3], beta.dist[,5], (beta.dist[,4]-2015), i) #+ res.boot_proj[i,]
}
test2 <- slr_test[85,]
plot(density(test2))
matplot(2016:2100, slr_test, type = 'l', lty = 1, col= rgb(0,0,0,0.01),
ylab = "Sea Level [cm]", xlab = "Years")#, xlim = c(2015, (2015+75)))
for(i in 1:85){
slr_test[i,] = sea_level_global(beta.dist[,1], beta.dist[,2], beta.dist[,3], beta.dist[,5], (beta.dist[,4]-2015), i) #+ res.boot_proj[i,]
}
matplot(2016:2100, slr_test, type = 'l', lty = 1, col= rgb(0,0,0,0.01),
ylab = "Sea Level [cm]", xlab = "Years")#, xlim = c(2015, (2015+75)))
matplot(2016:2100, slr_test[,nrand], type = 'l', lty = 1, col= rgb(0,0,0,0.01),
ylab = "Sea Level [cm]", xlab = "Years")#, xlim = c(2015, (2015+75)))
matplot(2016:2100, slr_test[,nrand], type = 'l', lty = 1, col="black",
ylab = "Sea Level [cm]", xlab = "Years")#, xlim = c(2015, (2015+75)))
box(lwd = 1.5)
time = 2016:2100
slr_old = 9 * 1:85
lines(time, slr_old, col = "red")
lines(time, slr_old, col = "red", lwd = 2)
matplot(2016:2100, slr_test[,nrand], type = 'l', lty = 1, col=rgb(0,0,0,0.25),
ylab = "Sea Level [cm]", xlab = "Years")
lines(time, slr_old, col = "red", lwd = 2)
matplot(2016:2100, slr_test[,nrand], type = 'l', lty = 1, col=rgb(0,0,0,0.35),
ylab = "Sea Level [cm]", xlab = "Years")
lines(time, slr_old, col = "red", lwd = 2)
expected <- apply(slr_test, MARGIN = 1, mean)
lines(time, expected, col = "blue", lwd = 2)
points(time, slr_old, col = "red", lwd = 2)
points(time, expected, col = "blue", lwd = 2)
lines(time, slr_old, col = myred, lwd = 2)
matplot(2016:2100, slr_test[,nrand], type = 'l', lty = 1, col=rgb(0,0,0,0.35),
ylab = "Sea Level [cm]", xlab = "Years")
lines(time, slr_old, col = myred, lwd = 2)
lines(time, expected, col = myblue, lwd = 2)
matplot(2016:2100, slr_test[,nrand], type = 'l', lty = 1, col=rgb(0,0,0,0.35),
ylab = "Sea Level [cm]", xlab = "Years")
lines(time, slr_old, col = myred, lwd = 5)
lines(time, expected, col = myblue, lwd = 5)
matplot(2016:2100, slr_test[,nrand], type = 'l', lty = 1, col="gray",
ylab = "Sea Level [cm]", xlab = "Years")
lines(time, slr_old, col = myred, lwd = 5)
lines(time, expected, col = myblue, lwd = 5)
for(i in 1:85){
slr_test[i,] = sea_level_global(beta.dist[,1], beta.dist[,2], beta.dist[,3], beta.dist[,5], (beta.dist[,4]-2015), i) + res.boot_proj[i,]
}
### Plot
time = 2016:2100
slr_old = 9 * 1:85
matplot(2016:2100, slr_test[,nrand], type = 'l', lty = 1, col="gray",
ylab = "Sea Level [cm]", xlab = "Years")
lines(time, slr_old, col = myred, lwd = 5)
lines(time, expected, col = myblue, lwd = 5)
for(i in 1:85){
slr_test[i,] = sea_level_global(beta.dist[,1], beta.dist[,2], beta.dist[,3], beta.dist[,5], (beta.dist[,4]-2015), i) #+ res.boot_proj[i,]
}
### Plot
time = 2016:2100
slr_old = 9 * 1:85
expected <- apply(slr_test, MARGIN = 1, mean)
matplot(2016:2100, slr_test[,nrand], type = 'l', lty = 1, col="gray",
ylab = "Sea Level [cm]", xlab = "Years")
lines(time, slr_old, col = myred, lwd = 5)
lines(time, expected, col = myblue, lwd = 5)
View(beta.dist)
abline(h = 700)
max(slr_old)
View(slr_test)
dim(slr_test)
plot(density(slr_test[85,1:10000]))
plot(density(slr_test[85,]))
plot(density(slr_test[85,10000:20000]))
plot(density(slr_test[85,10000:30000]))
plot(density(slr_test[85,10000:40000]))
plot(density(slr_test[85,1000:40000]))
plot(density(slr_test[85,1000:30000]))
test <- sapply(1:10000, function(x){
sample(beta.dist[x,])
})
dim(test)
dim(slr_test)
test <- sapply(1:10000, function(x){
sample(beta.dist[,x], replace = F)
})
test <- sapply(1:10000, function(x){
sample(beta.dist[,x], replace = F)
})
?sample
test <- sapply(1:10000, function(x){
sample(beta.dist[,x], 1, replace = F)
})
test <- sapply(1:10000, function(x){
sample(beta.dist[x,], 1, replace = F)
})
dim(test)
?sapplu
?sapply
test <- sapply(1:10000, function(x){
sample(beta.dist[x,], 1, replace = F)
})
test <- sapply(1:85, function(x){
sample(beta.dist[x,], 100, replace = F)
})
test <- sapply(1:85, function(x){
sample(beta.dist[,x], 100, replace = F)
})
test <- array(NA, dim= c(85, 10000))
for(i in 1:85){
for(j in 1:10000){
test[i,j] = sample(beta.dist[,j])
}
}
dim(beta.dist)
test <- sapply(1:85, function(x){
sample(beta.dist[x,], 100, replace = F)
})
View(beta.dist)
source('~/Documents/Grad/SCRiM/Rejection Sampling/beta/beta_delfzijl.R', echo=TRUE)
dim(beta.dist)
plot(density(beta.dist[,6]))
plot(density(beta.dist[,6]))
dev.off()
plot(density(beta.dist[,6]))
source('~/Documents/Grad/SCRiM/Rejection Sampling/beta/beta_delfzijl.R', echo=TRUE)
dim(beta_dist)[2]
dim(beta.dist)[2]
floor(sqrt(6))
floor(sqrt(7))
floor(sqrt(8))
floor(sqrt(9))
test <- sample(beta.dist, 10000, replace = FALSE)
dim(test)
getwd()
getwd()
hist(beta.dist[,4]-2015)
View(beta.dist)
plot(xt,beta_wt,type="l",col="black",
lwd=4,xlim=c(-50,3000),
ylim=c(0,0.05),
xlab="Projected Sea-Level Rise in 2100 [mm]",
ylab="Probability density function", main="(a) Extended Scenario of Pfeffer et al (2008)")
lines(xt,beta_pdf*0,lwd=1,lty=2,col="gray")
# add an arrow for the range of the distribution
y.loc.arrow.a=9.0e-4;
#arrows(lb.2100,y.loc.arrow.a,ub.2100,y.loc.arrow.a,col="black",lty="solid",code=3);
abline(v=lb.2100,lwd=1,col="blue",lty=2)
abline(v=ub.2100,lwd=1,col="blue",lty=2)
plot.marginals(beta.dist)
plot.pairs(beta.dist)
getwd()
source('~/Documents/Grad/SCRiM/Rejection Sampling/beta/beta_delfzijl.R', echo=TRUE)
setwd("~/Documents/Grad/SCRiM/Rejection Sampling/beta")
# Compile
rm(list = ls())
graphics.off()
library(compiler)
enableJIT(3)
# Set seed for reproducibility
set.seed(1)
# Load libraries
library(timeSeries)
# Set current year
year = 2015
source('~/Documents/Grad/SCRiM/Rejection Sampling/beta/beta_delfzijl.R', echo=TRUE)
?sample
test <- sample(beta.dist[,1], 10000, replace = F)
plot(density(beta.dist[,1]))
lines(density(test))
test <- sample(beta.dist[,4], 10000, replace = F)
plot(density(beta.dist[,4]))
lines(density(test))
n_obs = 10^4
test <- sapply(1:6, function(x){
sample(beta.dist[,x], n_obs, replace = FALSE)
})
View(test)
plot(density(beta.dist[,3]))
lines(density(test[,3]))
plot(density(beta.dist[,4]))
lines(density(test[,4]))
plot(density(beta.dist[,5]))
lines(density(test[,5]))
?runif
runif(20, 1, 1000)
floor(runif(20, 1, 1000))
View(res.boot_proj)
setwd("~/Documents/Grad/SCRiM/SLR Module/")
rm(list = ls())
graphics.off()
slr.global.data <- read.csv("data/delfzijl.csv", header = T)
source('~/Documents/Grad/SCRiM/SLR Module/beta_delfzijl.R', echo=TRUE)
pdf("output/projections_constrain.pdf", width = 6, height = 4.5)
par(oma = c(0,0,0,0)+0.1, mar = c(4,5,1,1)+0.1)
plot(years.global+year, slr.global, type="n",
xlab=("Year"),
ylab=("Mean sea-level anomaly [mm] \nwith respect to the year 2000"),
xlim=c(1879,2100),
ylim=c(-300,2000),
xaxs = 'i')
# add projected bootstrap samples
nexamp=50
nrand=sample(N/2,nexamp)  # decrease sampling due to cutting off outliers
for(i in 1:nexamp) {
lines(years.extra+year, scenario.constrain_poly[nrand[i],], col = "#0080FF40", lwd=0.5)
}
points(years.global+year, slr.global, pch = 21, bg = myred, cex = 0.5)
lines(years.extra+year,predict.global, col="black", lwd = 1.5)
scenario.constrain=mat.or.vec(length(beta.dist[,1]), n.years.extra)
for(n in 1:N)
{
# draw samples from beta distribution for slr model
scenario.constrain[n,]=slrmodel(years.extra+2015, boot.fit_predict[n,],beta.dist[n,5],beta.dist[n,4])
}
scenario.constrain_poly = scenario.constrain
# Apply residual structure to polynomial projections
for(i in 1:length(beta.dist[,1])) {
scenario.constrain[i,]=scenario.constrain[i,]+res.boot_proj[i,]
}
matplot(years.extra+2015, t(scenario.constrain[nrand,]), type = 'l', lty = 1, col = "black")
matlines(years.extra+2015, t(scenario.constrain_poly[nrand,]), type = 'l', lty = 1, col = myred, lwd = 0.5)
points(years.global+2015, slr.global)
pdf("output/projections_constrain.pdf", width = 6, height = 4.5)
par(oma = c(0,0,0,0)+0.1, mar = c(4,5,1,1)+0.1)
plot(years.global+year, slr.global, type="n",
xlab=("Year"),
ylab=("Mean sea-level anomaly [mm] \nwith respect to the year 2000"),
xlim=c(1879,2100),
ylim=c(-300,2000),
xaxs = 'i')
# add projected bootstrap samples
nexamp=50
nrand=sample(N/2,nexamp)  # decrease sampling due to cutting off outliers
for(i in 1:nexamp) {
lines(years.extra+year, scenario.constrain_poly[nrand[i],], col = "#0080FF40", lwd=0.5)
}
points(years.global+year, slr.global, pch = 21, bg = myred, cex = 0.5)
lines(years.extra+year,predict.global, col="black", lwd = 1.5)
# add the zero line top guide the eye
abline(h=0, lty=2)
legend(x="topleft",
legend=c("Observations [Delfzijl tide gauge]",
'Polynomial best fit projection',
'Rejection sample scenarios'),
pch = c(21, NA, NA),
pt.bg = c(myred, NA, NA),
col = c("black","black", myblue),
lty = c(NA, 1, 1),
lwd = c(NA, 2, 1),
bty = 'n',
inset = c(0.01, 0))
box(lwd = 1.5)
dev.off()
plot(years.global+year, slr.global, type="n",
xlab=("Year"),
ylab=("Mean sea-level anomaly [mm] \nwith respect to the year 2000"),
xlim=c(1879,2100),
ylim=c(-300,2000),
xaxs = 'i')
dev.off()
plot(years.global+year, slr.global, type="n",
xlab=("Year"),
ylab=("Mean sea-level anomaly [mm] \nwith respect to the year 2000"),
xlim=c(1879,2100),
ylim=c(-300,2000),
xaxs = 'i')
matlines(years.extra+year, scenario.constrain_poly[nrand[i],], col = "#0080FF40", lwd=0.5)#for(i in 1:nexamp) {
or(i in 1:nexamp) {
lines(years.extra+year, scenario.constrain_poly[nrand[i],], col = "#0080FF40", lwd=0.5)
}
for(i in 1:nexamp) {
lines(years.extra+year, scenario.constrain_poly[nrand[i],], col = "#0080FF40", lwd=0.5)
}
plot(years.global+year, slr.global, type="n",
xlab=("Year"),
ylab=("Mean sea-level anomaly [mm] \nwith respect to the year 2000"),
xlim=c(1879,2100),
ylim=c(-300,2000),
xaxs = 'i')
matlines(years.extra+year, scenario.constrain_poly[nrand,], col = "#0080FF40", lwd=0.5)#for(i in 1:nexamp) {
nrand
matlines(years.extra+year, scenario.constrain_poly[nrand,], col = "#0080FF40", lwd=0.5)#for(i in 1:nexamp) {
for(i in 1:nexamp) {
lines(years.extra+year, scenario.constrain_poly[nrand[i],], col = "#0080FF40", lwd=0.5)
}
for(i in 1:nexamp) {
lines(years.extra+year, scenario.constrain[nrand[i],], col = "#0080FF40", lwd=0.5)
}
matlines(years.extra+year, scenario.constrain[runif(100, 1, 30000)], col = "gray", lty = 2)
years.extra+year
matlines(years.extra+year, scenario.constrain[runif(100, 1, 30000),], col = "gray", lty = 2)
matlines(years.extra+year, scenario.constrain[,runif(100, 1, 30000)], col = "gray", lty = 2)
matlines(years.extra+year, scenario.constrain[1:10,], col = "gray", lty = 2)
matlines(years.extra+year, t(scenario.constrain[1:10,]), col = "gray", lty = 2)
matlines(years.extra+year, t(scenario.constrain_poly[runif(100, 1, 30000),]), col = "gray", lty = 2)
matlines(years.extra+year, t(scenario.constrain_poly[runif(100, 1, 30000),]), col = "gray", lty = 1, lwd = 2)
plot(years.global+year, slr.global, type="n",
xlab=("Year"),
ylab=("Mean sea-level anomaly [mm] \nwith respect to the year 2000"),
xlim=c(1879,2100),
ylim=c(-300,2000),
xaxs = 'i')
nexamp=50
nrand=sample(N/2,nexamp)  # decrease sampling due to cutting off outliers
matlines(years.extra+year, t(scenario.constrain_poly[runif(100, 1, 30000),]), col = "gray", lty = 1, lwd = 2)
for(i in 1:nexamp) {
lines(years.extra+year, scenario.constrain[nrand[i],], col = "#0080FF40", lwd=0.5)
}
plot(years.global+year, slr.global, type="n",
xlab=("Year"),
ylab=("Mean sea-level anomaly [mm] \nwith respect to the year 2000"),
xlim=c(1879,2100),
ylim=c(-300,2000),
xaxs = 'i')
# add projected bootstrap samples
nexamp=15
nrand=sample(N/2,nexamp)  # decrease sampling due to cutting off outliers
matlines(years.extra+year, t(scenario.constrain_poly[runif(100, 1, 30000),]), col = "gray", lty = 1, lwd = 2)
for(i in 1:nexamp) {
lines(years.extra+year, scenario.constrain_poly[nrand[i],], col = "#0080FF40", lwd=2)
}
plot(years.global+year, slr.global, type="n",
xlab=("Year"),
ylab=("Mean sea-level anomaly [mm] \nwith respect to the year 2000"),
xlim=c(1879,2100),
ylim=c(-300,2000),
xaxs = 'i')
# add projected bootstrap samples
nexamp=15
nrand=sample(N/2,nexamp)  # decrease sampling due to cutting off outliers
matlines(years.extra+year, t(scenario.constrain_poly[runif(100, 1, 30000),]), col = "gray", lty = 1)
plot(years.global+year, slr.global, type="n",
xlab=("Year"),
ylab=("Mean sea-level anomaly [mm] \nwith respect to the year 2000"),
xlim=c(1879,2100),
ylim=c(-300,2000),
xaxs = 'i')
# add projected bootstrap samples
nexamp=15
nrand=sample(N/2,nexamp)  # decrease sampling due to cutting off outliers
matlines(years.extra+year, t(scenario.constrain_poly[runif(1000, 1, 30000),]), col = "gray", lty = 1)
for(i in 1:nexamp) {
lines(years.extra+year, scenario.constrain_poly[nrand[i],], col = "#0080FF40", lwd=2)
}
plot(years.global+year, slr.global, type="n",
xlab=("Year"),
ylab=("Mean sea-level anomaly [mm] \nwith respect to the year 2000"),
xlim=c(1879,2100),
ylim=c(-300,2000),
xaxs = 'i')
# add projected bootstrap samples
nexamp=50
nrand=sample(N/2,nexamp)  # decrease sampling due to cutting off outliers
for(i in 1:nexamp) {
lines(years.extra+year, scenario.constrain[nrand[i],], col = "#0080FF40", lwd=0.5)
}
points(years.global+year, slr.global, pch = 21, bg = myred, cex = 0.5)
lines(years.extra+year,predict.global, col="black", lwd = 1.5)
View(beta.dist)
summary(beta.dist$c.star)
summary(beta.dist[,5])
plot(years.global+year, slr.global, type="n",
xlab=("Year"),
ylab=("Mean sea-level anomaly [mm] \nwith respect to the year 2000"),
xlim=c(1879,2100),
ylim=c(-300,2000),
xaxs = 'i')
nexamp=50
nrand=sample(N/2,nexamp)  # decrease sampling due to cutting off outliers
for(i in 1:nexamp) {
lines(years.extra+year, scenario.constrain[nrand[i],], col = "#0080FF40", lwd=0.5)
}
points(years.global+year, slr.global, pch = 21, bg = myred, cex = 0.5)
lines(years.extra+year,predict.global, col="black", lwd = 1.5)
abline(h=0, lty=2)
pdf("output/projections_constrain.pdf", width = 6, height = 4.5)
par(oma = c(0,0,0,0)+0.1, mar = c(4,5,1,1)+0.1)
plot(years.global+year, slr.global, type="n",
xlab=("Year"),
ylab=("Mean sea-level anomaly [mm] \nwith respect to the year 2000"),
xlim=c(1879,2100),
ylim=c(-300,2000),
xaxs = 'i')
# add projected bootstrap samples
nexamp=50
nrand=sample(N/2,nexamp)  # decrease sampling due to cutting off outliers
for(i in 1:nexamp) {
lines(years.extra+year, scenario.constrain[nrand[i],], col = "#0080FF40", lwd=0.5)
}
points(years.global+year, slr.global, pch = 21, bg = myred, cex = 0.5)
lines(years.extra+year,predict.global, col="black", lwd = 1.5)
# add the zero line top guide the eye
abline(h=0, lty=2)
legend(x="topleft",
legend=c("Observations [Delfzijl tide gauge]",
'Polynomial best fit projection',
'Rejection sample scenarios'),
pch = c(21, NA, NA),
pt.bg = c(myred, NA, NA),
col = c("black","black", myblue),
lty = c(NA, 1, 1),
lwd = c(NA, 2, 1),
bty = 'n',
inset = c(0.01, 0))
box(lwd = 1.5)
dev.off()
?mtext
pdf("output/projections_constrain_poly.pdf", width = 6, height = 4.5)
par(oma = c(0,0,0,0)+0.1, mar = c(4,5,1,1)+0.1)
plot(years.global+year, slr.global, type="n",
xlab=("Year"),
ylab=("Mean sea-level anomaly [mm] \nwith respect to the year 2000"),
xlim=c(1879,2100),
ylim=c(-300,2000),
xaxs = 'i')
# add projected bootstrap samples
nexamp=50
nrand=sample(N/2,nexamp)  # decrease sampling due to cutting off outliers
for(i in 1:nexamp) {
lines(years.extra+year, scenario.constrain_poly[nrand[i],], col = "#0080FF40", lwd=0.5)
}
points(years.global+year, slr.global, pch = 21, bg = myred, cex = 0.5)
lines(years.extra+year,predict.global, col="black", lwd = 1.5)
# add the zero line top guide the eye
abline(h=0, lty=2)
legend(x="topleft",
legend=c("Observations [Delfzijl tide gauge]",
'Polynomial best fit projection',
'Rejection sample scenarios'),
pch = c(21, NA, NA),
pt.bg = c(myred, NA, NA),
col = c("black","black", myblue),
lty = c(NA, 1, 1),
lwd = c(NA, 2, 1),
bty = 'n',
inset = c(0.01, 0))
box(lwd = 1.5)
dev.off()
for(pizza in 1:10) {
x <- pizza + 2
}
pizza <- vector(length=10)
pizza
pizza <- array(NA, dim = 10)
pizza
x <- array(NA, dim = 10)
for(pizza in 1:10) {
x[pizza] <- pizza + 2
}
pizza
x
x <- array(NA, dim = 10)
for(i in 10) {
x[i] <- i + 2
}
x
x <- array(NA, dim = 10)
x
for(i in 2:10) {
x[i] <- i + 2
}
x
x <- array(NA, dim = 10)
for(i in seq(1, 10, by = 2)) {
x[i] <- i + 2
}
x
x <- array(NA, dim = 10)
for(i in 1:50) {
x[i] <- i + 2
}
x
rm(x)
for(i in 1:50) {
x[i] <- i + 2
}
x <- array(NA, dim = 10)
i
rm(i)
for(i in 1:50) {
x[i] <- i + 2
}
i
x <- 3
x <- 4
?par
par()
X <- 3
