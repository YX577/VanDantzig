param_name <- names(Parameters)
param_desc <- c("Initial flood frequency", "Exponential flood frequency", "Value of goods", "Effective discount rate",
"Cost rate of heightening", "Subsidence rate", "Sea level rise rate")
param_symbol <- c(expression(p[0]), expression(alpha), "V", expression(delta~"'"), "k", expression(eta), expression(phi))
param_color <- OAT_col
param_table <- data.frame(param_name, param_desc, param_color)
# Create color vectors for each objective set
cost_col.1          <- array(NA, dim = length(Parameters))
cost_col.2          <- array(NA, dim = length(Parameters))
damages_col.1       <- array(NA, dim = length(Parameters))
damages_col.2       <- array(NA, dim = length(Parameters))
reliability_col.1   <- array(NA, dim = length(Parameters))
reliability_col.2   <- array(NA, dim = length(Parameters))
total_cost_col.1    <- array(NA, dim = length(Parameters))
total_cost_col.2    <- array(NA, dim = length(Parameters))
for(i in 1:length(Parameters))
{
# Costs
if(costs_OAT[99,i]-costs_OAT[1,i]==0)
{
cost_col.1[i] <- "light gray"
cost_col.2[i] <- "dark gray"
} else
{
cost_col.1[i] <- OAT_col[i]
cost_col.2[i] <- "black"
}
# Damages
if(NPV_expected_losses_OAT[99,i]-NPV_expected_losses_OAT[1,i]==0)
{
damages_col.1[i] <- "light gray"
damages_col.2[i] <- "dark gray"
} else
{
damages_col.1[i] <- OAT_col[i]
damages_col.2[i] <- "black"
}
# Reliability
if(EV_p_exceed_transient_OAT[99,i]-EV_p_exceed_transient_OAT[1,i]==0)
{
reliability_col.1[i] <- "light gray"
reliability_col.2[i] <- "dark gray"
} else
{
reliability_col.1[i] <- OAT_col[i]
reliability_col.2[i] <- "black"
}
# Total Costs
if(total_costs_OAT[99,i]-total_costs_OAT[1,i]==0)
{
total_cost_col.1[i] <- "light gray"
total_cost_col.2[i] <- "dark gray"
} else
{
total_cost_col.1[i] <- OAT_col[i]
total_cost_col.2[i] <- "black"
}
}
View(costs_OAT)
###################################
# file: OAT_Uncertainty.R
###################################
# Author and copyright: Perry Oddo
# Pennsylvania State University
# poddo@psu.edu
###################################
# One-at-a-time sensitivity analysis
# for van Dantzig (1956) model
####################################
# Set working directory
setwd("~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Parametric_Uncertainty/Sensitivity_Analysis/OAT")
# Compile
rm(list = ls())
graphics.off()
library(compiler)
enableJIT(3)
# Number of observations
n_obs = 10^4
# Set prior parameter values - Section 6 "The Doubtful Constants," van Dantzig (1956)
source("../../Scripts/priors.R")
# Source parameters for sea level rise and storm surge modules
source("../../Scripts/LHS.R")
Parameter_PDF <- Parameters
# Create vector to change parameters from 1% to 99% quantile of PDF
quantile_prior <- seq(0.01, 0.99, by = 0.01)
# van Dantzig problem setup:
# Time horizon until next evaluation of dikes (years)
T = 75
# Initial dike height
H_0 = 4.25
# Current year
year = 2015
# Fix dike height at "optimal" level from baseline model
X = 2.35
# considered time horizon, in annual increments
time = seq(0,T,by=1)
# Define variables arrays
p_exceed                = array(NA, dim = c(length(X), length(quantile_prior)))
costs                   = array(NA, dim = c(length(X), length(quantile_prior)))
NPV_expected_losses     = array(NA, dim = c(length(X), length(quantile_prior)))
EV_p_exceed_transient   = array(NA, dim = c(length(X), length(quantile_prior)))
Total_flood_frequency   = array(NA, dim = c(length(X), length(quantile_prior)))
total_costs             = array(NA, dim = c(length(X), length(quantile_prior)))
discount_factor         = array(NA, dim = c(length(time), length(quantile_prior)))
effective_height        = array(NA, dim = c(length(X), length(time), length(quantile_prior)))
p_exceed_transient      = array(NA, dim = c(length(X), length(time), length(quantile_prior)))
NPV_costs_flooding      = array(NA, dim = c(length(X), length(time), length(quantile_prior)))
subsidence              = array(NA, dim = c(length(time), length(quantile_prior)))
sea_level_rise          = array(NA, dim = c(length(time), length(quantile_prior)))
# Create uniform arrays for all parameters based on expected value of priors
p_zero_p          = array(priors$p_zero_p, length(quantile_prior))
alpha_p           = array(priors$alpha_p, length(quantile_prior))
V_p               = array(priors$V_p, length(quantile_prior))
delta_prime_p     = array(priors$delta_prime_p, length(quantile_prior))
k_p               = array(priors$k_p, length(quantile_prior))
subs_rate         = array(priors$subs_rate, length(quantile_prior))
sea_level_rate    = array(priors$sea_level_rate, length(quantile_prior))
Parameters <- data.frame(p_zero_p, alpha_p, V_p, delta_prime_p, k_p, subs_rate, sea_level_rate)
# Vector for 4 objectives
total_costs_OAT             = array(NA, dim = c(length(quantile_prior), length(Parameters)))
costs_OAT                   = array(NA, dim = c(length(quantile_prior), length(Parameters)))
NPV_expected_losses_OAT     = array(NA, dim = c(length(quantile_prior), length(Parameters)))
EV_p_exceed_transient_OAT   = array(NA, dim = c(length(quantile_prior), length(Parameters)))
# Run model for by holding all parameters constant and changing one at a time
for(n in 1:length(Parameters)){
p_zero_p          = array(priors$p_zero_p, length(quantile_prior))
alpha_p           = array(priors$alpha_p, length(quantile_prior))
V_p               = array(priors$V_p, length(quantile_prior))
delta_prime_p     = array(priors$delta_prime_p, length(quantile_prior))
k_p               = array(priors$k_p, length(quantile_prior))
subs_rate         = array(priors$subs_rate, length(quantile_prior))
sea_level_rate    = array(priors$sea_level_rate, length(quantile_prior))
Parameters <- data.frame(p_zero_p, alpha_p, V_p, delta_prime_p, k_p, subs_rate, sea_level_rate)
# Create vector to change single parameter from 1% to 99% quantile
Parameters[n] <- sapply(1:length(quantile_prior), function(x)
{
quantile(Parameter_PDF[,n], probs = quantile_prior[x])
})
# Analyze for each considered Deike heightening (eq. 1 in paper)
# Exceedance probability of current dike height
p_exceed = t(sapply(1:length(X), function(i) {
Parameters$p_zero_p * exp(-(Parameters$alpha_p) * X[i])   }))
# Land subsidence over length of time horizon
subsidence = t(sapply(1:length(time), function(j) {
Parameters$subs_rate * time[j]   }))
# Sea level rise over length of time horizon
sea_level_rise = t(sapply(1:length(time), function(j) {
Parameters$sea_level_rate * time[j]    }))
# Annual discounting factor as a function of time
discount_factor = t(sapply(1:length(time), function(j) {
1/(1+Parameters$delta_prime_p)^time[j]   }))
# The effective dike height is the current height minus the
# combined effects of subsidence and sea-level rise
effective_height[,,] = t(sapply(1:length(X), function(i) {
t(sapply(1:length(time), function(j) {
X[i] - subsidence[j,] - sea_level_rise[j,]    }))   }))
# Annual flood frequency using old observations and new effective height
# (assumes stationary flooding frequency)
p_exceed_transient[,,] = t(sapply(1:length(X), function(i) {
t(sapply(1:length(time), function(j) {
Parameters$p_zero_p * exp(-(Parameters$alpha_p) * effective_height[i,j,])   }))   }))
# Net Present Value of the discounted expected annual losses (damages due to flooding in a given year)
NPV_costs_flooding[,,] = t(sapply(1:length(X), function(i) {
t(sapply(1:length(time), function(j) {
p_exceed_transient[i,j,]*Parameters$V_p*discount_factor[j,]   }))   }))
# The costs of flood protection (dike building) - increase linearly with respect to height
costs = t(sapply(1:length(X), function(i) {
Parameters$k_p * X[i]   }))
# The total discounted expected losses are the sum of the discounted expected annual losses
NPV_expected_losses = apply(NPV_costs_flooding, c(1,3), sum)
# Expected value of average annual flood frequency (mean of annual flood frequencies)
EV_p_exceed_transient = apply(p_exceed_transient, c(1,3), mean)
# The total flood frequency over the life-time of the project is the sum of the flood frequencies,
# assuming independence, as in the original paper
Total_flood_frequency = apply(p_exceed_transient, c(1,3), sum)
# The total costs that depend on the dike height. This analysis neglects initial mobilization
# costs (I_0) in paper, as well as any costs extending beyond considered time horizon
total_costs = t(sapply(1:length(X), function(i) {
costs[i,] + NPV_expected_losses[i,]   }))
# Find the index of the EUM point (minimum along total costs)
total_costs_OAT[,n] <- total_costs
costs_OAT[,n] <- costs
NPV_expected_losses_OAT[,n] <- NPV_expected_losses
EV_p_exceed_transient_OAT[,n] <- EV_p_exceed_transient
}
colnames(total_costs_OAT)             <- names(Parameters)
colnames(costs_OAT)                   <- names(Parameters)
colnames(NPV_expected_losses_OAT)     <- names(Parameters)
colnames(EV_p_exceed_transient_OAT)   <- names(Parameters)
####################################
# Plot results
####################################
library(RColorBrewer)
OAT_col <- brewer.pal(7, "Paired")
# Create data frame for parameter names, descriptions, symbols, and colors
param_name <- names(Parameters)
param_desc <- c("Initial flood frequency", "Exponential flood frequency", "Value of goods", "Effective discount rate",
"Cost rate of heightening", "Subsidence rate", "Sea level rise rate")
param_symbol <- c(expression(p[0]), expression(alpha), "V", expression(delta~"'"), "k", expression(eta), expression(phi))
param_color <- OAT_col
param_table <- data.frame(param_name, param_desc, param_color)
# Create color vectors for each objective set
cost_col.1          <- array(NA, dim = length(Parameters))
cost_col.2          <- array(NA, dim = length(Parameters))
damages_col.1       <- array(NA, dim = length(Parameters))
damages_col.2       <- array(NA, dim = length(Parameters))
reliability_col.1   <- array(NA, dim = length(Parameters))
reliability_col.2   <- array(NA, dim = length(Parameters))
total_cost_col.1    <- array(NA, dim = length(Parameters))
total_cost_col.2    <- array(NA, dim = length(Parameters))
for(i in 1:length(Parameters))
{
# Costs
if(costs_OAT[99,i]-costs_OAT[1,i]==0)
{
cost_col.1[i] <- "light gray"
cost_col.2[i] <- "dark gray"
} else
{
cost_col.1[i] <- OAT_col[i]
cost_col.2[i] <- "black"
}
# Damages
if(NPV_expected_losses_OAT[99,i]-NPV_expected_losses_OAT[1,i]==0)
{
damages_col.1[i] <- "light gray"
damages_col.2[i] <- "dark gray"
} else
{
damages_col.1[i] <- OAT_col[i]
damages_col.2[i] <- "black"
}
# Reliability
if(EV_p_exceed_transient_OAT[99,i]-EV_p_exceed_transient_OAT[1,i]==0)
{
reliability_col.1[i] <- "light gray"
reliability_col.2[i] <- "dark gray"
} else
{
reliability_col.1[i] <- OAT_col[i]
reliability_col.2[i] <- "black"
}
# Total Costs
if(total_costs_OAT[99,i]-total_costs_OAT[1,i]==0)
{
total_cost_col.1[i] <- "light gray"
total_cost_col.2[i] <- "dark gray"
} else
{
total_cost_col.1[i] <- OAT_col[i]
total_cost_col.2[i] <- "black"
}
}
View(costs_OAT)
hist(Parameters$k)
hist(Parameter_PDF$k)
mean(Parameter_PDF$k)
rm(list = ls())
graphics.off()
library(compiler)
enableJIT(3)
# Number of observations
n_obs = 10^4
source("../../Scripts/priors.R")
source("../../Scripts/LHS.R")
Parameter_PDF <- Parameters
hist(Parameters[1])
hist(Parameters[,1])
ime = seq(0,T,by=1)
# Define variables arrays
p_exceed                = array(NA, dim = c(length(X), length(quantile_prior)))
costs                   = array(NA, dim = c(length(X), length(quantile_prior)))
NPV_expected_losses     = array(NA, dim = c(length(X), length(quantile_prior)))
EV_p_exceed_transient   = array(NA, dim = c(length(X), length(quantile_prior)))
Total_flood_frequency   = array(NA, dim = c(length(X), length(quantile_prior)))
total_costs             = array(NA, dim = c(length(X), length(quantile_prior)))
discount_factor         = array(NA, dim = c(length(time), length(quantile_prior)))
effective_height        = array(NA, dim = c(length(X), length(time), length(quantile_prior)))
p_exceed_transient      = array(NA, dim = c(length(X), length(time), length(quantile_prior)))
NPV_costs_flooding      = array(NA, dim = c(length(X), length(time), length(quantile_prior)))
subsidence              = array(NA, dim = c(length(time), length(quantile_prior)))
sea_level_rise          = array(NA, dim = c(length(time), length(quantile_prior)))
# Create uniform arrays for all parameters based on expected value of priors
p_zero_p          = array(priors$p_zero_p, length(quantile_prior))
alpha_p           = array(priors$alpha_p, length(quantile_prior))
V_p               = array(priors$V_p, length(quantile_prior))
delta_prime_p     = array(priors$delta_prime_p, length(quantile_prior))
k_p               = array(priors$k_p, length(quantile_prior))
subs_rate         = array(priors$subs_rate, length(quantile_prior))
sea_level_rate    = array(priors$sea_level_rate, length(quantile_prior))
quantile_prior <- seq(0.01, 0.99, by = 0.01)
# van Dantzig problem setup:
# Time horizon until next evaluation of dikes (years)
T = 75
# Initial dike height
H_0 = 4.25
# Current year
year = 2015
# Fix dike height at "optimal" level from baseline model
X = 2.35
# considered time horizon, in annual increments
time = seq(0,T,by=1)
# Define variables arrays
p_exceed                = array(NA, dim = c(length(X), length(quantile_prior)))
costs                   = array(NA, dim = c(length(X), length(quantile_prior)))
NPV_expected_losses     = array(NA, dim = c(length(X), length(quantile_prior)))
EV_p_exceed_transient   = array(NA, dim = c(length(X), length(quantile_prior)))
Total_flood_frequency   = array(NA, dim = c(length(X), length(quantile_prior)))
total_costs             = array(NA, dim = c(length(X), length(quantile_prior)))
discount_factor         = array(NA, dim = c(length(time), length(quantile_prior)))
effective_height        = array(NA, dim = c(length(X), length(time), length(quantile_prior)))
p_exceed_transient      = array(NA, dim = c(length(X), length(time), length(quantile_prior)))
NPV_costs_flooding      = array(NA, dim = c(length(X), length(time), length(quantile_prior)))
subsidence              = array(NA, dim = c(length(time), length(quantile_prior)))
sea_level_rise          = array(NA, dim = c(length(time), length(quantile_prior)))
# Create uniform arrays for all parameters based on expected value of priors
p_zero_p          = array(priors$p_zero_p, length(quantile_prior))
alpha_p           = array(priors$alpha_p, length(quantile_prior))
V_p               = array(priors$V_p, length(quantile_prior))
delta_prime_p     = array(priors$delta_prime_p, length(quantile_prior))
k_p               = array(priors$k_p, length(quantile_prior))
subs_rate         = array(priors$subs_rate, length(quantile_prior))
sea_level_rate    = array(priors$sea_level_rate, length(quantile_prior))
Parameters <- data.frame(p_zero_p, alpha_p, V_p, delta_prime_p, k_p, subs_rate, sea_level_rate)
View(Parameters)
for(n in 1:1){#length(Parameters)){
p_zero_p          = array(priors$p_zero_p, length(quantile_prior))
alpha_p           = array(priors$alpha_p, length(quantile_prior))
V_p               = array(priors$V_p, length(quantile_prior))
delta_prime_p     = array(priors$delta_prime_p, length(quantile_prior))
k_p               = array(priors$k_p, length(quantile_prior))
subs_rate         = array(priors$subs_rate, length(quantile_prior))
sea_level_rate    = array(priors$sea_level_rate, length(quantile_prior))
Parameters <- data.frame(p_zero_p, alpha_p, V_p, delta_prime_p, k_p, subs_rate, sea_level_rate)
# Create vector to change single parameter from 1% to 99% quantile
Parameters[n] <- sapply(1:length(quantile_prior), function(x)
{
quantile(Parameter_PDF[,n], probs = quantile_prior[x])
})
}
View(Parameters)
###################################
# file: OAT_Uncertainty.R
###################################
# Author and copyright: Perry Oddo
# Pennsylvania State University
# poddo@psu.edu
###################################
# One-at-a-time sensitivity analysis
# for van Dantzig (1956) model
####################################
# Set working directory
setwd("~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Parametric_Uncertainty/Sensitivity_Analysis/OAT")
# Compile
rm(list = ls())
graphics.off()
library(compiler)
enableJIT(3)
# Number of observations
n_obs = 10^4
# Set prior parameter values - Section 6 "The Doubtful Constants," van Dantzig (1956)
source("../../Scripts/priors.R")
# Source parameters for sea level rise and storm surge modules
source("../../Scripts/LHS.R")
Parameter_PDF <- Parameters
# Create vector to change parameters from 1% to 99% quantile of PDF
quantile_prior <- seq(0.01, 0.99, by = 0.01)
# van Dantzig problem setup:
# Time horizon until next evaluation of dikes (years)
T = 75
# Initial dike height
H_0 = 4.25
# Current year
year = 2015
# Fix dike height at "optimal" level from baseline model
X = 2.35
# considered time horizon, in annual increments
time = seq(0,T,by=1)
# Define variables arrays
p_exceed                = array(NA, dim = c(length(X), length(quantile_prior)))
costs                   = array(NA, dim = c(length(X), length(quantile_prior)))
NPV_expected_losses     = array(NA, dim = c(length(X), length(quantile_prior)))
EV_p_exceed_transient   = array(NA, dim = c(length(X), length(quantile_prior)))
Total_flood_frequency   = array(NA, dim = c(length(X), length(quantile_prior)))
total_costs             = array(NA, dim = c(length(X), length(quantile_prior)))
discount_factor         = array(NA, dim = c(length(time), length(quantile_prior)))
effective_height        = array(NA, dim = c(length(X), length(time), length(quantile_prior)))
p_exceed_transient      = array(NA, dim = c(length(X), length(time), length(quantile_prior)))
NPV_costs_flooding      = array(NA, dim = c(length(X), length(time), length(quantile_prior)))
subsidence              = array(NA, dim = c(length(time), length(quantile_prior)))
sea_level_rise          = array(NA, dim = c(length(time), length(quantile_prior)))
# Create uniform arrays for all parameters based on expected value of priors
p_zero_p          = array(priors$p_zero_p, length(quantile_prior))
alpha_p           = array(priors$alpha_p, length(quantile_prior))
V_p               = array(priors$V_p, length(quantile_prior))
delta_prime_p     = array(priors$delta_prime_p, length(quantile_prior))
k_p               = array(priors$k_p, length(quantile_prior))
subs_rate         = array(priors$subs_rate, length(quantile_prior))
sea_level_rate    = array(priors$sea_level_rate, length(quantile_prior))
Parameters <- data.frame(p_zero_p, alpha_p, V_p, delta_prime_p, k_p, subs_rate, sea_level_rate)
# Vector for 4 objectives
total_costs_OAT             = array(NA, dim = c(length(quantile_prior), length(Parameters)))
costs_OAT                   = array(NA, dim = c(length(quantile_prior), length(Parameters)))
NPV_expected_losses_OAT     = array(NA, dim = c(length(quantile_prior), length(Parameters)))
EV_p_exceed_transient_OAT   = array(NA, dim = c(length(quantile_prior), length(Parameters)))
# Run model for by holding all parameters constant and changing one at a time
for(n in 1:length(Parameters)){
p_zero_p          = array(priors$p_zero_p, length(quantile_prior))
alpha_p           = array(priors$alpha_p, length(quantile_prior))
V_p               = array(priors$V_p, length(quantile_prior))
delta_prime_p     = array(priors$delta_prime_p, length(quantile_prior))
k_p               = array(priors$k_p, length(quantile_prior))
subs_rate         = array(priors$subs_rate, length(quantile_prior))
sea_level_rate    = array(priors$sea_level_rate, length(quantile_prior))
Parameters <- data.frame(p_zero_p, alpha_p, V_p, delta_prime_p, k_p, subs_rate, sea_level_rate)
# Create vector to change single parameter from 1% to 99% quantile
Parameters[n] <- sapply(1:length(quantile_prior), function(x)
{
quantile(Parameter_PDF[,n], probs = quantile_prior[x])
})
# Analyze for each considered Deike heightening (eq. 1 in paper)
# Exceedance probability of current dike height
p_exceed = t(sapply(1:length(X), function(i) {
Parameters$p_zero_p * exp(-(Parameters$alpha_p) * X[i])   }))
# Land subsidence over length of time horizon
subsidence = t(sapply(1:length(time), function(j) {
Parameters$subs_rate * time[j]   }))
# Sea level rise over length of time horizon
sea_level_rise = t(sapply(1:length(time), function(j) {
Parameters$sea_level_rate * time[j]    }))
# Annual discounting factor as a function of time
discount_factor = t(sapply(1:length(time), function(j) {
1/(1+Parameters$delta_prime_p)^time[j]   }))
# The effective dike height is the current height minus the
# combined effects of subsidence and sea-level rise
effective_height[,,] = t(sapply(1:length(X), function(i) {
t(sapply(1:length(time), function(j) {
X[i] - subsidence[j,] - sea_level_rise[j,]    }))   }))
# Annual flood frequency using old observations and new effective height
# (assumes stationary flooding frequency)
p_exceed_transient[,,] = t(sapply(1:length(X), function(i) {
t(sapply(1:length(time), function(j) {
Parameters$p_zero_p * exp(-(Parameters$alpha_p) * effective_height[i,j,])   }))   }))
# Net Present Value of the discounted expected annual losses (damages due to flooding in a given year)
NPV_costs_flooding[,,] = t(sapply(1:length(X), function(i) {
t(sapply(1:length(time), function(j) {
p_exceed_transient[i,j,]*Parameters$V_p*discount_factor[j,]   }))   }))
# The costs of flood protection (dike building) - increase linearly with respect to height
costs = t(sapply(1:length(X), function(i) {
Parameters$k_p * X[i]   }))
# The total discounted expected losses are the sum of the discounted expected annual losses
NPV_expected_losses = apply(NPV_costs_flooding, c(1,3), sum)
# Expected value of average annual flood frequency (mean of annual flood frequencies)
EV_p_exceed_transient = apply(p_exceed_transient, c(1,3), mean)
# The total flood frequency over the life-time of the project is the sum of the flood frequencies,
# assuming independence, as in the original paper
Total_flood_frequency = apply(p_exceed_transient, c(1,3), sum)
# The total costs that depend on the dike height. This analysis neglects initial mobilization
# costs (I_0) in paper, as well as any costs extending beyond considered time horizon
total_costs = t(sapply(1:length(X), function(i) {
costs[i,] + NPV_expected_losses[i,]   }))
# Find the index of the EUM point (minimum along total costs)
total_costs_OAT[,n] <- total_costs
costs_OAT[,n] <- costs
NPV_expected_losses_OAT[,n] <- NPV_expected_losses
EV_p_exceed_transient_OAT[,n] <- EV_p_exceed_transient
}
colnames(total_costs_OAT)             <- names(Parameters)
colnames(costs_OAT)                   <- names(Parameters)
colnames(NPV_expected_losses_OAT)     <- names(Parameters)
colnames(EV_p_exceed_transient_OAT)   <- names(Parameters)
View(Parameters)
View(costs_OAT)
View(total_costs_OAT)
View(NPV_expected_losses_OAT)
source('~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Parametric_Uncertainty/Sensitivity_Analysis/OAT/OAT_Uncertainty.R', echo=TRUE)
View(costs)
View(costs_OAT)
?openmordm
setwd("~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Parametric_Uncertainty/Sensitivity_Analysis/OAT")
# Compile
rm(list = ls())
graphics.off()
library(compiler)
enableJIT(3)
# Number of observations
n_obs = 10^4
# Set prior parameter values - Section 6 "The Doubtful Constants," van Dantzig (1956)
source("../../Scripts/priors.R")
# Source parameters for sea level rise and storm surge modules
source("../../Scripts/LHS.R")
setwd("~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Parametric_Uncertainty/Sensitivity_Analysis/OAT")
# Compile
rm(list = ls())
graphics.off()
library(compiler)
enableJIT(3)
# Number of observations
n_obs = 10^4
# Set prior parameter values - Section 6 "The Doubtful Constants," van Dantzig (1956)
source("../../Scripts/priors.R")
sea_level_rate = 0.016
# Source parameters for sea level rise and storm surge modules
source("../../Scripts/LHS.R")
Parameter_PDF <- Parameters
View(Parameter_PDF)
View(Parameter_PDF)
source('~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Parametric_Uncertainty/Sensitivity_Analysis/OAT/OAT_Uncertainty.R', echo=TRUE)
source('~/Documents/Grad/SCRiM/vanDantzig/Model_Versions/Parametric_Uncertainty/Sensitivity_Analysis/OAT/OAT_Uncertainty.R', echo=TRUE)
hist(Parameter_PDF$sea_level_rate
)
max(Parameter_PDF$sea_level_rate)
